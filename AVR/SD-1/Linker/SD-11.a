;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : SD-1
;Version : 001
;Date    : 27.06.2011
;Author  : Alexandr Gordejchik
;Company : NTS
;Comments:
;
;
;Chip type               : ATtiny2313
;AVR Core Clock frequency: 3,686400 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 32
;*****************************************************/
;
;#include <tiny2313.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;#include <delay.h>
;#define CR 0xD
;#define LF 0xA
;#define ctrl_Z 0x1A
;flash char msms[]="AT+CMGF=1";
;//flash char csmp[]="AT+CSMP=17,167,0,0"  ;
;// ќбъ€вление и инициализаци€ массива ввода номера
;//flash char csms[]="AT+CSCA=" ;
;//flash char csms1[]="+79037011111";
;flash char csms2[]=",145" ;
;flash char nsms[]="AT+CMGS=";
;eeprom char nsms1[12] ;
;flash char get[]="AT+CPBF=" ;
;// ќбъ€вление и инициализаци€ массива текста SMS
;flash char tsms[]={0x44,0x4F,0x4F,0x52,0x20,0x4F,0x50,0x45,0x4E};
;eeprom char eebuffer[72];
;flash char off[]="AT+QPOWD=1";
;unsigned char i;
;unsigned char j;
;char rdata;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 72
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;//***********************************************************************************************************
;void UART_Transmit(char data)
; 0000 005C {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0000 005D while (!(UCSRA & (1<<UDRE))) {};
;	data -> Y+0
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 005E UDR=data;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 005F }
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;//************************************************************************************************************
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0066 {
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0067 char data;
; 0000 0068 while (rx_counter==0);
;PCODE: $00000019 VOL: 0
;	data -> R17
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0069 data=rx_buffer[rx_rd_index++];
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 006A #if RX_BUFFER_SIZE != 256
; 0000 006B if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 006C #endif
; 0000 006D #asm("cli")
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
	cli
;PCODE: $00000029 VOL: 0
; 0000 006E --rx_counter;
;PCODE: $0000002A VOL: 0
; 0000 006F #asm("sei")
;PCODE: $0000002B VOL: 0
	sei
;PCODE: $0000002C VOL: 0
; 0000 0070 return data;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0071 }
;PCODE: $00000030 VOL: 0
;#pragma used-
;#endif
;//***********************************************************************************************************
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0077 {
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0078 // Place your code here
; 0000 0079 
; 0000 007A }
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;
;//************************************************************************************************************
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 007F {
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0080 char status,data;
; 0000 0081 status=UCSRA;
;PCODE: $00000038 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0082 data=UDR;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0083 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0084    {
; 0000 0085    rx_buffer[rx_wr_index++]=data;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0086 #if RX_BUFFER_SIZE == 256
; 0000 0087    // special case for receiver buffer size=256
; 0000 0088    if (++rx_counter == 0)
; 0000 0089       {
; 0000 008A #else
; 0000 008B    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 008C    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 008D       {
; 0000 008E       rx_counter=0;
;PCODE: $0000004D VOL: 0
; 0000 008F #endif
; 0000 0090       rx_buffer_overflow=1;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0091       }
; 0000 0092    }
;PCODE: $00000050 VOL: 0
; 0000 0093 }
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;
;//************************************************************************************************************
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Declare your global variables here
;
;void main(void)
; 0000 009C {
;PCODE: $00000056 VOL: 0
; 0000 009D // Declare your local variables here
; 0000 009E 
; 0000 009F // Crystal Oscillator division factor: 1
; 0000 00A0 #pragma optsize-
; 0000 00A1 CLKPR=0x80;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 00A2 CLKPR=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 00A3 #ifdef _OPTIMIZE_SIZE_
; 0000 00A4 #pragma optsize+
; 0000 00A5 #endif
; 0000 00A6 
; 0000 00A7 // Input/Output Ports initialization
; 0000 00A8 // Port A initialization
; 0000 00A9 // Func2=In Func1=In Func0=In
; 0000 00AA // State2=T State1=T State0=T
; 0000 00AB PORTA=0x00;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 00AC DDRA=0x00;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 00AD 
; 0000 00AE // Port B initialization
; 0000 00AF // Func7=In Func6=In Func5=In Func4=Out Func3=Out Func2=In Func1=In Func0=Out
; 0000 00B0 // State7=T State6=T State5=T State4=0 State3=0 State2=T State1=T State0=1
; 0000 00B1 PORTB=0x01;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 00B2 DDRB=0x19;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 00B3 
; 0000 00B4 // Port D initialization
; 0000 00B5 // Func6=Out Func5=In Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 00B6 // State6=0 State5=T State4=0 State3=P State2=P State1=T State0=T
; 0000 00B7 PORTD=0x0C;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 00B8 DDRD=0x50;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 00B9 
; 0000 00BA // Timer/Counter 0 initialization
; 0000 00BB // Clock source: System Clock
; 0000 00BC // Clock value: Timer 0 Stopped
; 0000 00BD // Mode: Normal top=0xFF
; 0000 00BE // OC0A output: Disconnected
; 0000 00BF // OC0B output: Disconnected
; 0000 00C0 TCCR0A=0x00;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 00C1 TCCR0B=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 00C2 TCNT0=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 00C3 OCR0A=0x00;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 00C4 OCR0B=0x00;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 00C5 
; 0000 00C6 // Timer/Counter 1 initialization
; 0000 00C7 // Clock source: System Clock
; 0000 00C8 // Clock value: Timer1 Stopped
; 0000 00C9 // Mode: Normal top=0xFFFF
; 0000 00CA // OC1A output: Discon.
; 0000 00CB // OC1B output: Discon.
; 0000 00CC // Noise Canceler: Off
; 0000 00CD // Input Capture on Falling Edge
; 0000 00CE // Timer1 Overflow Interrupt: Off
; 0000 00CF // Input Capture Interrupt: Off
; 0000 00D0 // Compare A Match Interrupt: Off
; 0000 00D1 // Compare B Match Interrupt: Off
; 0000 00D2 TCCR1A=0x00;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 00D3 TCCR1B=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 00D4 TCNT1H=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 00D5 TCNT1L=0x00;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00D6 ICR1H=0x00;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00D7 ICR1L=0x00;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00D8 OCR1AH=0x00;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00D9 OCR1AL=0x00;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00DA OCR1BH=0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00DB OCR1BL=0x00;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00DC 
; 0000 00DD // External Interrupt(s) initialization
; 0000 00DE // INT0: Off
; 0000 00DF // INT1: On
; 0000 00E0 // INT1 Mode: Low level
; 0000 00E1 // Interrupt on any change on pins PCINT0-7: Off
; 0000 00E2 GIMSK=0x80;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00E3 MCUCR=0x00;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00E4 EIFR=0x80;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00E5 
; 0000 00E6 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00E7 TIMSK=0x00;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00E8 
; 0000 00E9 // Universal Serial Interface initialization
; 0000 00EA // Mode: Disabled
; 0000 00EB // Clock source: Register & Counter=no clk.
; 0000 00EC // USI Counter Overflow Interrupt: Off
; 0000 00ED USICR=0x00;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00EE 
; 0000 00EF // USART initialization
; 0000 00F0 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00F1 // USART Receiver: On
; 0000 00F2 // USART Transmitter: On
; 0000 00F3 // USART Mode: Asynchronous
; 0000 00F4 // USART Baud Rate: 9600
; 0000 00F5 UCSRA=0x00;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00F6 UCSRB=0x98;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00F7 UCSRC=0x06;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00F8 UBRRH=0x00;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00F9 UBRRL=0x17;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00FA 
; 0000 00FB // Analog Comparator initialization
; 0000 00FC // Analog Comparator: Off
; 0000 00FD // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00FE ACSR=0x80;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00FF DIDR=0x00;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0100 
; 0000 0101 // Global enable interrupts
; 0000 0102 #asm("sei")
;PCODE: $0000009D VOL: 0
	sei
;PCODE: $0000009E VOL: 0
; 0000 0103  // PORTB.3=1;
; 0000 0104 while (1)
;PCODE: $0000009F VOL: 0
; 0000 0105  {
; 0000 0106       // Place your code here
; 0000 0107       PORTB.3=0;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0108 PORTB.4=1;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0109 //while(PIND.2==0);
; 0000 010A 
; 0000 010B PORTB.0=0;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 010C PORTD.6=0;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 010D delay_ms(1000);
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 010E PORTB.0=1;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 010F //PORTD.4=0;
; 0000 0110 //while(PIND.5==1) {};
; 0000 0111 PORTB.4=0;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0112 delay_ms(9000);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0113  #asm("sei")
;PCODE: $000000B2 VOL: 0
	sei
;PCODE: $000000B3 VOL: 0
; 0000 0114 m1:    UART_Transmit('a');
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 0115     UART_Transmit('t');
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0116     UART_Transmit(CR);
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 0117      goto m1;
;PCODE: $000000BE VOL: 0
; 0000 0118 
; 0000 0119     delay_ms(3000) ;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 011A       for (i=0; i<72; i++)
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 011B  {eebuffer[i]=rx_buffer[i];}
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 011C   PORTB.3=1;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 011D 
; 0000 011E   while(1);
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 011F 
; 0000 0120     while(!((rdata=='O') || (rdata=='o')))
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0121     {rdata=getchar();}
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 0122     while(!((rdata=='K') || (rdata=='k')))
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0123     {rdata=getchar();}
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0124    delay_ms(200);
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 0125 
; 0000 0126      for (i=0; i<72; i++)
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 0127  {eebuffer[i]=rx_buffer[i];}
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 0128   PORTB.3=1;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 0129   while(1);
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 012A      /*
; 0000 012B    for (i=0; i<9; i++)
; 0000 012C  {UART_Transmit(msms[i]);}
; 0000 012D  UART_Transmit(CR);
; 0000 012E 
; 0000 012F delay_ms(6000);
; 0000 0130 
; 0000 0131 
; 0000 0132 for (i=0; i<8; i++)
; 0000 0133  {UART_Transmit(get[i]);}
; 0000 0134   UART_Transmit(0x22);
; 0000 0135    UART_Transmit(0x30);
; 0000 0136    // UART_Transmit('e');
; 0000 0137     //UART_Transmit('t');
; 0000 0138     UART_Transmit(0x22);
; 0000 0139   UART_Transmit(CR);
; 0000 013A   rx_wr_index=0;
; 0000 013B   delay_ms(4000);
; 0000 013C 
; 0000 013D 
; 0000 013E 
; 0000 013F   i=0;
; 0000 0140   while(rdata!=',')
; 0000 0141   {rdata=rx_buffer[i++];}
; 0000 0142   rdata=rx_buffer[i++];
; 0000 0143 
; 0000 0144   if (rdata==0x22)
; 0000 0145   {for (j=0; j<12; j++){nsms1[j]=rx_buffer[i++];}}
; 0000 0146 
; 0000 0147 for (i=0; i<8; i++)
; 0000 0148  {UART_Transmit(csms[i]);}
; 0000 0149   UART_Transmit(0x22);
; 0000 014A  for (i=0; i<12; i++)
; 0000 014B  {UART_Transmit(csms1[i]);}
; 0000 014C  UART_Transmit(0x22);
; 0000 014D  for (i=0; i<4; i++)
; 0000 014E  {UART_Transmit(csms2[i]);}
; 0000 014F   UART_Transmit(CR); */
; 0000 0150 
; 0000 0151   delay_ms(200);
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 0152  for (i=0; i<8; i++)
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 0153  {UART_Transmit(nsms[i]);}
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 0154    UART_Transmit(0x22);
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0155   for (i=0; i<12; i++)
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 0156  {UART_Transmit(nsms1[i]);}
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 0157   UART_Transmit(0x22);
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 0158  for (i=0; i<4; i++)
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 0159  {UART_Transmit(csms2[i]);}
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 015A  UART_Transmit(CR);
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 015B   delay_ms(200);
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 015C 
; 0000 015D  for (i=0; i<9; i++)
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 015E   {UART_Transmit(tsms[i]);}
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 015F 
; 0000 0160 
; 0000 0161    delay_ms(4000);
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 0162  UART_Transmit(ctrl_Z);
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 0163 
; 0000 0164 
; 0000 0165 
; 0000 0166  // #asm("cli")
; 0000 0167  /*for (i=0; i<10; i++)
; 0000 0168  {UART_Transmit(off[i]);}
; 0000 0169   UART_Transmit(CR);
; 0000 016A  delay_ms(1000);   */
; 0000 016B /* for (i=0; i<72; i++)
; 0000 016C  {eebuffer[i]=rx_buffer[i];}
; 0000 016D   PORTB.3=1;  */
; 0000 016E 
; 0000 016F     while(1);
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 0170 
; 0000 0171  // while(PIND.2==1);
; 0000 0172    //delay_ms(4500);
; 0000 0173   // while(PIND.2==1);
; 0000 0174       }
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 0175 }
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
