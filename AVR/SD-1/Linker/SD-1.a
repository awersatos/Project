;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Evaluation
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : SD-1
;Version : 001
;Date    : 27.06.2011
;Author  : Alexandr Gordejchik
;Company : NTS
;Comments:
;
;
;Chip type               : ATtiny2313
;AVR Core Clock frequency: 3,686400 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 32
;*****************************************************/
;
;#include <tiny2313.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;#include <delay.h>
;#define UDRE 5
;#define RXC 7
;#define CR 0xD
;#define LF 0xA
;#define ctrl_Z 0x1A
;flash char msms[]="at+cmgf=1";
;// ќбъ€вление и инициализаци€ массива ввода номера
;flash char nsms[]="at+cmgs=+79139243999,145";
;// ќбъ€вление и инициализаци€ массива текста SMS
;flash char tsms[]="door open";
;unsigned char i;
;unsigned char rdata;
;void UART_Transmit(char data)
; 0000 0026 {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0000 0027 while (!(UCSRA & (1<<UDRE))) {};
;	data -> Y+0
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0028 UDR=data;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0029 }
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;
;char UART_Receive(void)
; 0000 002C { while (!(UCSRA & (1<<RXC)));
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 002D   return UDR;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 002E   }
;PCODE: $00000021 VOL: 0
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0031 {
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0032 PORTB.3=0;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0033 PORTB.4=1;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0034 
; 0000 0035 PORTB.0=0;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0036 PORTD.6=0;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0037 delay_ms(2000);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0038 PORTB.0=1;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0039 PORTD.4=0;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 003A while(PIND.5==1) {};
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 003B PORTB.4=0;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 003C delay_ms(2000);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 003D m1: UART_Transmit('a');
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 003E     UART_Transmit('t');
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 003F     UART_Transmit(CR);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0040 
; 0000 0041 rdata=UART_Receive();
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0042 if (rdata!=CR) {goto m1;}
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0043 rdata=UART_Receive();
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0044 if (rdata!=LF) {goto m1;}
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0045 rdata=UART_Receive();
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0046 if (!((rdata=='O') || (rdata=='o'))) {goto m1;} ;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0047  rdata=UART_Receive();
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0048 if (!((rdata=='K') || (rdata=='k'))) {goto m1;}
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0049 PORTB.3=1;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 004A delay_ms(200);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 004B 
; 0000 004C m2: for (i=0; i<11; i++)
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 004D  {UART_Transmit(msms[i]);}
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 004E  UART_Transmit(CR);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 004F 
; 0000 0050 rdata=UART_Receive();
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0051 if (rdata!=CR) {goto m2;}
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0052 rdata=UART_Receive();
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0053 if (rdata!=LF) {goto m2;}
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0054 rdata=UART_Receive();
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0055 if (!((rdata=='O') || (rdata=='o'))) {goto m2;}
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0056  rdata=UART_Receive();
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0057 if (!((rdata=='K') || (rdata=='k'))) {goto m2;}
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0058 PORTB.3=0;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 0059 PORTB.4=1;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 005A 
; 0000 005B for (i=0; i<24; i++)
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 005C  {UART_Transmit(nsms[i]);}
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 005D  UART_Transmit(CR);
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 005E  for (i=0; i<11; i++)
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 005F  {UART_Transmit(tsms[i]);}
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0060  UART_Transmit(ctrl_Z);
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 0061  PORTB.4=0;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0062 
; 0000 0063 
; 0000 0064 
; 0000 0065 
; 0000 0066 
; 0000 0067 
; 0000 0068 
; 0000 0069 }
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Declare your global variables here
;
;void main(void)
; 0000 0071 {
;PCODE: $000000E7 VOL: 0
; 0000 0072 // Declare your local variables here
; 0000 0073 
; 0000 0074 // Crystal Oscillator division factor: 1
; 0000 0075 #pragma optsize-
; 0000 0076 CLKPR=0x80;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 0077 CLKPR=0x00;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 0078 #ifdef _OPTIMIZE_SIZE_
; 0000 0079 #pragma optsize+
; 0000 007A #endif
; 0000 007B 
; 0000 007C // Input/Output Ports initialization
; 0000 007D // Port A initialization
; 0000 007E // Func2=In Func1=In Func0=In
; 0000 007F // State2=T State1=T State0=T
; 0000 0080 PORTA=0x00;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 0081 DDRA=0x00;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 0082 
; 0000 0083 // Port B initialization
; 0000 0084 // Func7=In Func6=In Func5=In Func4=Out Func3=Out Func2=In Func1=In Func0=Out
; 0000 0085 // State7=T State6=T State5=T State4=0 State3=0 State2=T State1=T State0=1
; 0000 0086 PORTB=0x01;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 0087 DDRB=0x19;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 0088 
; 0000 0089 // Port D initialization
; 0000 008A // Func6=Out Func5=In Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 008B // State6=0 State5=T State4=0 State3=P State2=P State1=T State0=T
; 0000 008C PORTD=0x0C;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 008D DDRD=0x50;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 008E 
; 0000 008F // Timer/Counter 0 initialization
; 0000 0090 // Clock source: System Clock
; 0000 0091 // Clock value: Timer 0 Stopped
; 0000 0092 // Mode: Normal top=0xFF
; 0000 0093 // OC0A output: Disconnected
; 0000 0094 // OC0B output: Disconnected
; 0000 0095 TCCR0A=0x00;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 0096 TCCR0B=0x00;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 0097 TCNT0=0x00;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 0098 OCR0A=0x00;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 0099 OCR0B=0x00;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 009A 
; 0000 009B // Timer/Counter 1 initialization
; 0000 009C // Clock source: System Clock
; 0000 009D // Clock value: Timer1 Stopped
; 0000 009E // Mode: Normal top=0xFFFF
; 0000 009F // OC1A output: Discon.
; 0000 00A0 // OC1B output: Discon.
; 0000 00A1 // Noise Canceler: Off
; 0000 00A2 // Input Capture on Falling Edge
; 0000 00A3 // Timer1 Overflow Interrupt: Off
; 0000 00A4 // Input Capture Interrupt: Off
; 0000 00A5 // Compare A Match Interrupt: Off
; 0000 00A6 // Compare B Match Interrupt: Off
; 0000 00A7 TCCR1A=0x00;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00A8 TCCR1B=0x00;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00A9 TCNT1H=0x00;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 00AA TCNT1L=0x00;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00AB ICR1H=0x00;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00AC ICR1L=0x00;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00AD OCR1AH=0x00;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00AE OCR1AL=0x00;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00AF OCR1BH=0x00;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00B0 OCR1BL=0x00;
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00B1 
; 0000 00B2 // External Interrupt(s) initialization
; 0000 00B3 // INT0: Off
; 0000 00B4 // INT1: On
; 0000 00B5 // INT1 Mode: Low level
; 0000 00B6 // Interrupt on any change on pins PCINT0-7: Off
; 0000 00B7 GIMSK=0x80;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00B8 MCUCR=0x00;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00B9 EIFR=0x80;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00BA 
; 0000 00BB // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00BC TIMSK=0x00;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00BD 
; 0000 00BE // Universal Serial Interface initialization
; 0000 00BF // Mode: Disabled
; 0000 00C0 // Clock source: Register & Counter=no clk.
; 0000 00C1 // USI Counter Overflow Interrupt: Off
; 0000 00C2 USICR=0x00;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00C3 
; 0000 00C4 // USART initialization
; 0000 00C5 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00C6 // USART Receiver: On
; 0000 00C7 // USART Transmitter: On
; 0000 00C8 // USART Mode: Asynchronous
; 0000 00C9 // USART Baud Rate: 9600
; 0000 00CA UCSRA=0x00;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00CB UCSRB=0x18;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 00CC UCSRC=0x06;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00CD UBRRH=0x00;
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 00CE UBRRL=0x17;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00CF 
; 0000 00D0 // Analog Comparator initialization
; 0000 00D1 // Analog Comparator: Off
; 0000 00D2 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00D3 ACSR=0x80;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 00D4 DIDR=0x00;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00D5 
; 0000 00D6 // Global enable interrupts
; 0000 00D7 #asm("sei")
;PCODE: $0000012E VOL: 0
	sei
;PCODE: $0000012F VOL: 0
; 0000 00D8  PORTB.3=1;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00D9 while (1)
;PCODE: $00000132 VOL: 0
; 0000 00DA       {
; 0000 00DB       // Place your code here
; 0000 00DC 
; 0000 00DD       }
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 00DE }
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
