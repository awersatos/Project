;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : SD-N
;Version : 0
;Date    : 12.08.2011
;Author  : Alexandr Gordejchik
;Company : NTS
;Comments:
;
;
;Chip type               : ATtiny2313
;AVR Core Clock frequency: 3,686400 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 32
;*****************************************************/
;
;#include <tiny2313.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;#include <stdio.h>
;#include <delay.h>
;#include <string.h>
;#define CR 0xD     // Определение служебных символов
;#define LF 0xA
;#define ctrl_Z 0x1A
;
; char z;
;eeprom char eebuffer[56];
;unsigned char i;
; char NR[12];
;//char *n;
;
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 50
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;//***********************************************************************************************************
;void UART_Transmit(char data) // Функция передачи символа через UART
; 0000 0056 {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0000 0057 while (!(UCSRA & (1<<UDRE))) {};
;	data -> Y+0
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0058 UDR=data;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0059 }
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;
;//**********************************************************************************************************
;       void SEND_Str(flash char *str) {        // Функция передачи строки  из флеш памяти
; 0000 005C void SEND_Str(flash char *str) {
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 005D         while(*str) {
;	*str -> Y+0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 005E        UART_Transmit(*str++);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 005F 
; 0000 0060     };
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0061     delay_ms(20);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0062 }
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;
;//**********************************************************************************************************
; /* void SEND_Str_EEPROM(eeprom char *str) {        // Функция передачи строки из eeprom
;        while(*str) {
;       UART_Transmit(*str++);
;
;    };
;    delay_ms(20);
;}   */
;//**********************************************************************************************************
; /* void SEND_Str_RAM(char *str) {        // Функция передачи строки из оперативной памяти
;        while(*str) {
;       UART_Transmit(*str++);
;
;    };
;    delay_ms(20);
;} */
;//**********************************************************************************************************
;void CLEAR_BUF(void)   // Функция очистки буффера приема
; 0000 0076 {
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0077 for (i=0;i<RX_BUFFER_SIZE;i++) {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0078       rx_buffer[i]=0;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0079     };
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 007A    rx_wr_index=0;
;PCODE: $0000003E VOL: 0
; 0000 007B }
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;//**********************************************************************************************************
;  char TEST_OK(void)     // Функция проверки ответа ОК на команду
; 0000 007E   {
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 007F   char c;
; 0000 0080   char *d;
; 0000 0081   char OK[]="OK";
; 0000 0082   d=strstr(rx_buffer, OK);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;	c -> R17
;	*d -> R16
;	OK -> Y+2
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0083   c=*d;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0084  CLEAR_BUF();
;PCODE: $00000053 VOL: 0
; 0000 0085    return c;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0086 
; 0000 0087   }
;PCODE: $00000058 VOL: 0
;//**********************************************************************************************************
;  char REG_NET(void)   // Функция проверки регистрации в сети
; 0000 008A   {
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 008B   char c;
; 0000 008C   char *d;
; 0000 008D   char REG[]="+CREG:";
; 0000 008E   d=strstr(rx_buffer, REG);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;	c -> R17
;	*d -> R16
;	REG -> Y+2
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 008F   d=d+9;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0090   c=*d;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0091   CLEAR_BUF();
;PCODE: $00000075 VOL: 0
; 0000 0092   return c;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0093   }
;PCODE: $0000007A VOL: 0
;//**********************************************************************************************************
;char SET_NR(void) // Функция считывания телефонного номера с SIM карты
; 0000 0096 {
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0097 char c;
; 0000 0098 char *d;
; 0000 0099 
; 0000 009A d=strstr(rx_buffer, ",\"+7");
;PCODE: $0000007D VOL: 0
;	c -> R17
;	*d -> R16
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 009B if (d==NULL){c=0;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 009C           return c;}
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 009D   d=d+4;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 009E   i=0;
;PCODE: $0000008F VOL: 0
; 0000 009F   while(i<12)
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00A0   {
; 0000 00A1   NR[i++]=*d;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00A2    d=d--;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00A3    NR[i++]=*d;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00A4    d=d+3;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00A5   }
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00A6   NR[10]='F';
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00A7   CLEAR_BUF();
;PCODE: $000000AD VOL: 0
; 0000 00A8   c=1;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00A9   return c;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00AA }
;PCODE: $000000B3 VOL: 0

	.DSEG
_0xC:
	.BYTE 0x5
;//**********************************************************************************************************
;char TEST_ERROR(void)   // Функция проверки на ошибку
; 0000 00AD {

	.CSEG
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00AE char *d;
; 0000 00AF d=strstr(rx_buffer, "ERROR");
;PCODE: $000000B6 VOL: 0
;	*d -> R17
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00B0  CLEAR_BUF();
;PCODE: $000000BE VOL: 0
; 0000 00B1  return *d;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00B2 }
;PCODE: $000000C3 VOL: 0

	.DSEG
_0x11:
	.BYTE 0x6
;//**********************************************************************************************************
;// External Interrupt 0 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 00B6 {

	.CSEG
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00B7 delay_us(200);
;PCODE: $000000C6 VOL: 0
; 0000 00B8 if (PIND.3==0) {
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00B9 
; 0000 00BA if (z==0)
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00BB {z=128;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00BC       PORTD.6=0;  // Открытие порта
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00BD       PORTD.4=0;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00BE       while(PIND.5==1);
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00BF                             /*
; 0000 00C0       //while(TEST_OK()==0) { SEND_Str("AT\r");}  // Проверка ответа модема
; 0000 00C1        // SEND_Str("AT+CREG?\r");
; 0000 00C2      while(REG_NET()!='1') {           // Проверка регистрации в сети
; 0000 00C3 
; 0000 00C4        SEND_Str("AT+CREG?\r");
; 0000 00C5       //delay_ms(1000);
; 0000 00C6       }
; 0000 00C7                       */
; 0000 00C8    while(TEST_OK()==0) {   SEND_Str("AT+CMGF=0\r"); }    // Установка PDU режима
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00C9      //  if (TEST_OK()==0) goto mx3 ;
; 0000 00CA 
; 0000 00CB       SEND_Str("AT+CMGS=43\r");  //    Ввод команды отправки сообщения
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00CC 
; 0000 00CD 
; 0000 00CE    /*   if (strrchr(rx_buffer, '>')==NULL)
; 0000 00CF       {CLEAR_BUF();
; 0000 00D0       goto mx4;}
; 0000 00D1       CLEAR_BUF();    */
; 0000 00D2 
; 0000 00D3       SEND_Str("0001000B91");     // Ввод настроек PDU
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00D4 
; 0000 00D5       for(i=0;i<12;i++)            // Ввод номера
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00D6       {UART_Transmit(NR[i]);}
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00D7 
; 0000 00D8        SEND_Str("00181E04120437044F0442043E0020043D04300020043E044504400430043D0443\x1A");
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00D9     //  if (TEST_ERROR()=='E') goto mx4;         // Ввод текста SMS
; 0000 00DA        PORTD.4=1; // RTS
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00DB        PORTD.6=1;  // DTR    */
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 00DC }
; 0000 00DD else {z=0;}
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00DE  PORTB.4=1;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 00DF   PORTB.3=1;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00E0   delay_ms(500);
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00E1  while(PIND.3==0);
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00E2 PORTB.4=0;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00E3   PORTB.3=0;}
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00E4 
; 0000 00E5 }
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;//*********************************************************************************************
;// Функция обработки прерывания по приему символа USART
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 00E9 {
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00EA char status,data;
; 0000 00EB status=UCSRA;
;PCODE: $0000011D VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00EC data=UDR;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00ED if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00EE    {
; 0000 00EF    rx_buffer[rx_wr_index++]=data;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00F0 #if RX_BUFFER_SIZE == 256
; 0000 00F1    // special case for receiver buffer size=256
; 0000 00F2    if (++rx_counter == 0)
; 0000 00F3       {
; 0000 00F4 #else
; 0000 00F5    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00F6    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00F7       {
; 0000 00F8       rx_counter=0;
;PCODE: $00000132 VOL: 0
; 0000 00F9 #endif
; 0000 00FA       rx_buffer_overflow=1;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 00FB       }
; 0000 00FC    }
;PCODE: $00000135 VOL: 0
; 0000 00FD }
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;
; //*************************************************************************
; // функция считывания символа из буфера приема
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0106 {
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 0107 char data;
; 0000 0108 while (rx_counter==0);
;PCODE: $0000013D VOL: 0
;	data -> R17
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 0109 data=rx_buffer[rx_rd_index++];
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 010A #if RX_BUFFER_SIZE != 256
; 0000 010B if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 010C #endif
; 0000 010D #asm("cli")
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
	cli
;PCODE: $0000014D VOL: 0
; 0000 010E --rx_counter;
;PCODE: $0000014E VOL: 0
; 0000 010F #asm("sei")
;PCODE: $0000014F VOL: 0
	sei
;PCODE: $00000150 VOL: 0
; 0000 0110 return data;
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 0111 }
;PCODE: $00000154 VOL: 0
;#pragma used-
;#endif
;//***************************************************************************
;
;
;// ОСНОВНАЯ ФУНКЦИЯ ПРОГРАММЫ
;void main(void)
; 0000 0119 {
;PCODE: $00000155 VOL: 0
; 0000 011A // Declare your local variables here
; 0000 011B 
; 0000 011C // Crystal Oscillator division factor: 1
; 0000 011D #pragma optsize-
; 0000 011E CLKPR=0x80;
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 011F CLKPR=0x00;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 0120 #ifdef _OPTIMIZE_SIZE_
; 0000 0121 #pragma optsize+
; 0000 0122 #endif
; 0000 0123 
; 0000 0124 // Input/Output Ports initialization
; 0000 0125 // Port A initialization
; 0000 0126 // Func2=In Func1=In Func0=In
; 0000 0127 // State2=T State1=T State0=T
; 0000 0128 PORTA=0x00;
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 0129 DDRA=0x00;
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 012A 
; 0000 012B // Port B initialization
; 0000 012C // Func7=In Func6=In Func5=In Func4=Out Func3=Out Func2=In Func1=In Func0=Out
; 0000 012D // State7=T State6=T State5=T State4=0 State3=0 State2=T State1=T State0=1
; 0000 012E PORTB=0x01;
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 012F DDRB=0x19;
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 0130 
; 0000 0131 // Port D initialization
; 0000 0132 // Func6=Out Func5=In Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 0133 // State6=1 State5=T State4=1 State3=T State2=T State1=T State0=T
; 0000 0134 PORTD=0x50;
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 0135 DDRD=0x50;
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 0136 
; 0000 0137 // Timer/Counter 0 initialization
; 0000 0138 // Clock source: System Clock
; 0000 0139 // Clock value: Timer 0 Stopped
; 0000 013A // Mode: Normal top=0xFF
; 0000 013B // OC0A output: Disconnected
; 0000 013C // OC0B output: Disconnected
; 0000 013D TCCR0A=0x00;
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 013E TCCR0B=0x00;
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 013F TCNT0=0x00;
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 0140 OCR0A=0x00;
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 0141 OCR0B=0x00;
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 0142 
; 0000 0143 // Timer/Counter 1 initialization
; 0000 0144 // Clock source: System Clock
; 0000 0145 // Clock value: Timer1 Stopped
; 0000 0146 // Mode: Normal top=0xFFFF
; 0000 0147 // OC1A output: Discon.
; 0000 0148 // OC1B output: Discon.
; 0000 0149 // Noise Canceler: Off
; 0000 014A // Input Capture on Falling Edge
; 0000 014B // Timer1 Overflow Interrupt: Off
; 0000 014C // Input Capture Interrupt: Off
; 0000 014D // Compare A Match Interrupt: Off
; 0000 014E // Compare B Match Interrupt: Off
; 0000 014F TCCR1A=0x00;
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 0150 TCCR1B=0x00;
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 0151 TCNT1H=0x00;
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 0152 TCNT1L=0x00;
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 0153 ICR1H=0x00;
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 0154 ICR1L=0x00;
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 0155 OCR1AH=0x00;
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 0156 OCR1AL=0x00;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 0157 OCR1BH=0x00;
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 0158 OCR1BL=0x00;
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 0159 
; 0000 015A // External Interrupt(s) initialization
; 0000 015B // INT0: Off
; 0000 015C // INT1: On
; 0000 015D // INT1 Mode: Low level
; 0000 015E // Interrupt on any change on pins PCINT0-7: Off
; 0000 015F GIMSK=0x80;
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 0160 MCUCR=0x00;
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 0161 EIFR=0x80;
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 0162 
; 0000 0163 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0164 TIMSK=0x00;
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 0165 
; 0000 0166 // Universal Serial Interface initialization
; 0000 0167 // Mode: Disabled
; 0000 0168 // Clock source: Register & Counter=no clk.
; 0000 0169 // USI Counter Overflow Interrupt: Off
; 0000 016A USICR=0x00;
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 016B 
; 0000 016C // USART initialization
; 0000 016D // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 016E // USART Receiver: On
; 0000 016F // USART Transmitter: On
; 0000 0170 // USART Mode: Asynchronous
; 0000 0171 // USART Baud Rate: 115200
; 0000 0172 UCSRA=0x00;
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 0173 UCSRB=0x98;
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 0174 UCSRC=0x06;
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 0175 UBRRH=0x00;
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 0176 UBRRL=0x01;
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 0177 
; 0000 0178 // Analog Comparator initialization
; 0000 0179 // Analog Comparator: Off
; 0000 017A // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 017B ACSR=0x80;
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 017C DIDR=0x00;
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 017D      PORTB.3=1;
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 017E      PORTB.4=1;
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 017F // Global enable interrupts
; 0000 0180 #asm("sei")
;PCODE: $000001A0 VOL: 0
	sei
;PCODE: $000001A1 VOL: 0
; 0000 0181       PORTB.0=0;     //Включение модема
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 0182       delay_ms(1000);
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 0183       PORTB.0=1;
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 0184        delay_ms(250);
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 0185 
; 0000 0186        PORTD.6=0;  // Открытие порта
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 0187       PORTD.4=0;
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 0188       while(PIND.5==1);
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 0189 
; 0000 018A m01:      SEND_Str("AT\r");  // Проверка ответа модема
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 018B 
; 0000 018C       if (TEST_OK()==0) goto m01 ;
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 018D 
; 0000 018E 
; 0000 018F m02:    SEND_Str("AT+CREG?\r");   // Проверка регистрации в сети
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 0190 
; 0000 0191       if (REG_NET()!='1')
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 0192       {
; 0000 0193       delay_ms(1000);
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 0194       goto m02;
;PCODE: $000001CB VOL: 0
; 0000 0195       }
; 0000 0196 
; 0000 0197 
; 0000 0198 m03:      SEND_Str("AT+CPBF=\"N\"\r");  // Считывание телефонного номера с SIM карты
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 0199       if (SET_NR()==0) goto m03;      // Преобразование номера в PDU формат
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 019A PORTB.3=0;
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 019B PORTB.4=1;
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 019C       z=1;
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 019D while (1)
;PCODE: $000001DD VOL: 0
; 0000 019E       {
; 0000 019F      // PORTB.4=1;
; 0000 01A0       while((PIND.2==1)||(z==0)){
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 01A1       if (z==0){PORTB.4=0;}
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 01A2       else {PORTB.4=1;}
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 01A3       }
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 01A4       PORTB.4=0;
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0000 01A5       //while(z==0);
; 0000 01A6         delay_ms(250);
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 01A7       while(PIND.2==0){ PORTB.3=1;}
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 01A8       PORTB.3=0;
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 01A9 
; 0000 01AA      PORTD.6=0;  // Открытие порта
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 01AB       PORTD.4=0;
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 01AC       while(PIND.5==1);
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 01AD 
; 0000 01AE m1:      SEND_Str("AT\r");  // Проверка ответа модема
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 01AF 
; 0000 01B0       if (TEST_OK()==0) goto m1 ;
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0000 01B1 
; 0000 01B2 
; 0000 01B3 m2:    SEND_Str("AT+CREG?\r");   // Проверка регистрации в сети
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 01B4 
; 0000 01B5       if (REG_NET()!='1')
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 01B6       {
; 0000 01B7       delay_ms(1000);
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 01B8       goto m2;
;PCODE: $00000220 VOL: 0
; 0000 01B9       }
; 0000 01BA     //  z='R';
; 0000 01BB             /*
; 0000 01BC m3:      SEND_Str("AT+CPBF=\"N\"\r");  // Считывание телефонного номера с SIM карты
; 0000 01BD       if (SET_NR()==0) goto m3;      // Преобразование номера в PDU формат
; 0000 01BE                     */
; 0000 01BF m4:      SEND_Str("AT+CMGF=0\r");     // Установка PDU режима
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 01C0        if (TEST_OK()==0) goto m4 ;
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 01C1 
; 0000 01C2 m5:       SEND_Str("AT+CMGS=39\r");  //    Ввод команды отправки сообщения
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0000 01C3 
; 0000 01C4 
; 0000 01C5       if (strrchr(rx_buffer, '>')==NULL)
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0000 01C6       {CLEAR_BUF();
;PCODE: $00000238 VOL: 0
; 0000 01C7       goto m5;}
;PCODE: $00000239 VOL: 0
; 0000 01C8       CLEAR_BUF();
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0000 01C9 
; 0000 01CA       SEND_Str("0001000B91");     // Ввод настроек PDU
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 01CB 
; 0000 01CC       for(i=0;i<12;i++)            // Ввод номера
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0000 01CD       {UART_Transmit(NR[i]);}
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0000 01CE 
; 0000 01CF        SEND_Str("00081A0414043204350440044C0020043E0442043A0440044B04420430\x1A");
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
; 0000 01D0       if (TEST_ERROR()=='E') goto m5;         // Ввод текста SMS
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
; 0000 01D1 
; 0000 01D2              /*
; 0000 01D3 
; 0000 01D4        SEND_Str("AT+CSQ?\r");
; 0000 01D5         delay_ms(1000);
; 0000 01D6        #asm("cli")
; 0000 01D7       for (i=0; i<50; i++)    // Запись буфера приема в eeprom
; 0000 01D8       {eebuffer[i]=rx_buffer[i];}
; 0000 01D9               */
; 0000 01DA         PORTD.4=1; // RTS
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0000 01DB        PORTD.6=1;  // DTR
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0000 01DC 
; 0000 01DD 
; 0000 01DE       }
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0000 01DF }
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;
