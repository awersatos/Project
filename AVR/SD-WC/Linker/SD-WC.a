;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : SD-WC
;Version : 1
;Date    : 16.10.2011
;Author  : Alexandr Gordejchik
;Company : NTS
;Comments:
;
;
;Chip type               : ATmega8L
;Program type            : Application
;AVR Core Clock frequency: 3,686400 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <string.h>
;#include <stdlib.h>
;#include <stdio.h>
;#include <spi.h>
;
;#define CR 0xD     // Определение служебных символов
;#define LF 0xA
;#define ctrl_Z 0x1A
;
;typedef union{                     // Определение структурного типа DATA
;		unsigned int data;
;		unsigned char byte[2];
;		struct{
;			unsigned char b0:1;
;			unsigned char b1:1;
;			unsigned char b2:1;
;			unsigned char b3:1;
;			unsigned char b4:1;
;			unsigned char b5:1;
;			unsigned char b6:1;
;			unsigned char b7:1;
;			unsigned char b8:1;
;			unsigned char b9:1;
;			unsigned char b10:1;
;			unsigned char b11:1;
;			unsigned char b12:1;
;			unsigned char b13:1;
;			unsigned char b14:1;
;			unsigned char b15:1;
;		} Bit;
;	}DATA;
;                    // Определение глобальных переменных
;char z;          //Переменная статуса охраны
;unsigned int i; //Счетчик
;unsigned char SPI_buffer[64];
;unsigned char pktlen;
;char Error;
;eeprom unsigned char OP;
;eeprom char NR[12];     // Массив телефонного номера
;eeprom unsigned char COUNT;
;//eeprom char eebuf[64];
;//eeprom char eebuffer[256];
;flash unsigned char CH=78;  //Номер канала
;flash unsigned char SW=9;  //Делитель частоты
;// значения для инициализации кадра
;                                                               //   15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
;        flash unsigned char tbl_frame[30]  = {0x30,0x98,0x90,  //48  1  0  0  1  1  0 0 0 0 0 0 0 0 0 0 0 15:13 - 5 байт приамбула 12:11 - синхро-слово 64 бита {Reg55[15:0],Reg54[15:0],Reg53[15:0],Reg52[15:0]} 10:8 - трейлер 4 бита 7:6 - NRZ кодирование сигнала 5:4 - не использовать помехоустойчивое кодирование 3,2,1,0 - не особо важные настройки
;                                              0x31,0xFF,0x8F,  //49  1  1  1  1  1  1 1 1 1 0 0 0 1 1 1 1 15:8 - максимальная задержка 2 мс 7 - часы работают в режиме сна 5:0 - BDATA1 сбросить через 15 us
;                                              0x32,0x80,0x28,  //50  1  0  0  0  0  0 0 0 0 0 1 0 1 0 0 0 15:8 и 7:0 задержки для работы в режиме TX
;                                              0x33,0x80,0x56,  //51  1  0  0  0  0  0 0 0 0 1 0 1 0 1 1 0 15:8 - RX таймер 7 - MISO в неопределенном состоянии 6:0 - ключ для скрамблера
;                                              0x34,0x4E,0xF6,  //52  0  1  0  0  1  1 1 0 1 1 1 1 0 1 1 0  биты синхронизации
;                                              0x35,0xF6,0xF5,  //53  1  1  1  1  0  1 1 0 1 1 1 1 0 1 0 1  биты синхронизации
;                                              0x36,0x18,0x5C,  //54  0  0  0  1  1  0 0 0 0 1 0 1 1 1 0 0  биты синхронизации
;                                              0x37,0xD6,0x51,  //55  1  1  0  1  0  1 1 0 0 1 0 1 0 0 0 1  биты синхронизации
;                                              0x38,0x44,0x44,  //56  0  1  0  0  0  1 0 0 0 1 0 0 0 1 0 0  7 - PKF-flag высокий уровень активный
;                                              0x39,0xA0,0x00}; //57  1  0  1  0  0  0 0 0 0 0 0 0 0 0 0 0  15 - использовать CRC 14 -не использовать скрамблер 13 - первый байт содержит длину пакета 7:0 - CRC (???????????)
;
;		// значения для инициализации передатчика               //   15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
;		flash unsigned char tbl_rfinit[54]  = {0x09,0x21,0x01,  //9   0  0  1  0  0  0 0 1 0 0 0 0 0 0 0 1
;											   0x00,0x35,0x4D,  //0   0  0  0  1  1  1 1 1 0 0 0 0 0 0 0 1
;											   0x02,0x1F,0x01,  //2   0  0  0  1  1  1 1 1 0 0 0 0 0 0 0 1
;											   0x04,0xBC,0xF0,  //4   1  0  1  1  1  1 0 0 1 1 1 1 0 0 0 0
;											   0x05,0x00,0xA1,  //5   0  0  0  0  0  0 0 0 1 0 1 0 0 0 0 1
;											   0x07,0x12,0x4C,  //7   0  0  0  1  0  0 1 0 0 1 0 0 1 1 0 0 13:9 - делитель 8- TX mode 7- RX mode 6:0 - частота (2402+76)
;											   0x08,0x80,0x00,  //8   1  0  0  0  0  0 0 0 0 0 0 0 0 0 0 0
;											   0x0C,0x80,0x00,  //12  1  0  0  0  0  0 0 0 0 0 0 0 0 0 0 0
;											   0x0E,0x16,0x9B,  //14  0  0  0  1  0  1 1 0 1 0 0 1 1 0 1 1
;											   0x0F,0x90,0xAD,  //15  1  0  0  1  0  0 0 0 1 0 1 0 1 1 0 1
;											   0x10,0xB0,0x00,  //16  1  0  1  1  0  0 0 0 0 0 0 0 0 0 0 0
;											   0x13,0xA1,0x14,  //19  1  0  1  0  0  0 0 1 0 0 0 1 0 1 0 0
;											   0x14,0x81,0x91,  //20  1  0  0  0  0  0 0 1 1 0 0 1 0 0 0 1
;											   0x16,0x00,0x02,  //22  0  0  0  0  0  0 0 0 0 0 0 0 0 0 1 0
;											   0x18,0xB1,0x40,  //24  1  0  1  1  0  0 0 1 0 1 0 0 0 0 0 0
;											   0x19,0xA8,0x0F,  //25  1  0  1  0  1  0 0 0 0 0 0 0 1 1 1 1
;											   0x1A,0x3F,0x04,  //26  0  0  1  1  1  1 1 1 0 0 0 0 0 1 0 0
;											   0x1C,0x58,0x00}; //28  0  1  0  1  1  0 0 0 0 0 0 0 0 0 0 0
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 512
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;
;#else
;unsigned int rx_wr_index;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;
;
;//********************************************************************************************
;void LightDiode(unsigned char n) // Функция управления светодиодом
; 0000 0098 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0099  switch (n)
;	n -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 009A  {
; 0000 009B  case 0:
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 009C 			{
; 0000 009D 			PORTC.4=0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 009E             PORTC.5=0;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 009F 				break;
;PCODE: $00000017 VOL: 0
; 0000 00A0 			}
; 0000 00A1  case 1:
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 00A2 			{
; 0000 00A3 			PORTC.4=1;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 00A4             PORTC.5=0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 00A5 				break;
;PCODE: $0000001F VOL: 0
; 0000 00A6 			}
; 0000 00A7  case 2:
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 00A8 			{
; 0000 00A9 			PORTC.4=0;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 00AA             PORTC.5=1;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 00AB 				break;
;PCODE: $00000027 VOL: 0
; 0000 00AC  case 3:
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 00AD 			{
; 0000 00AE 			PORTC.4=1;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 00AF             PORTC.5=1;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 00B0 				break;
;PCODE: $0000002F VOL: 0
; 0000 00B1 			} 			}
; 0000 00B2  }
;PCODE: $00000030 VOL: 0
; 0000 00B3 
; 0000 00B4 }
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;//***********************************************************************************************************
;void UART_Transmit(char data) // Функция передачи символа через UART
; 0000 00B7 {
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 00B8 while (!(UCSRA & (1<<UDRE))) {};
;	data -> Y+0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 00B9 UDR=data;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 00BA }
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;
;//**********************************************************************************************************
;       void SEND_Str(flash char *str) {        // Функция передачи строки  из флеш памяти
; 0000 00BD void SEND_Str(flash char *str) {
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 00BE         while(*str) {
;	*str -> Y+0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 00BF        UART_Transmit(*str++);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 00C0 
; 0000 00C1     };
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 00C2     delay_ms(20);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 00C3 }
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;
;//**********************************************************************************************************
;void CLEAR_BUF(void)   // Функция очистки буффера приема
; 0000 00C7 {
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 00C8 
; 0000 00C9 for (i=0;i<RX_BUFFER_SIZE;i++) {
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 00CA       rx_buffer[i]=0;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 00CB     };
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 00CC    rx_wr_index=0;
;PCODE: $0000006C VOL: 0
; 0000 00CD    #asm("wdr")
;PCODE: $0000006D VOL: 0
	wdr
;PCODE: $0000006E VOL: 0
; 0000 00CE 
; 0000 00CF }
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;//**********************************************************************************************************
;  char TEST_OK(void)     // Функция проверки ответа ОК на команду
; 0000 00D2   {
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 00D3   char c;
; 0000 00D4   char *d;
; 0000 00D5   char OK[]="OK";
; 0000 00D6   d=strstr(rx_buffer, OK);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;	c -> R17
;	*d -> R18,R19
;	OK -> Y+4
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00D7   c=*d;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00D8   #asm("wdr")
;PCODE: $00000083 VOL: 0
	wdr
;PCODE: $00000084 VOL: 0
; 0000 00D9  CLEAR_BUF();
;PCODE: $00000085 VOL: 0
; 0000 00DA    return c;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00DB 
; 0000 00DC   }
;PCODE: $0000008A VOL: 0
;//**********************************************************************************************************
;  char REG_NET(void)   // Функция проверки регистрации в сети
; 0000 00DF   {
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00E0   char c;
; 0000 00E1   char *d;
; 0000 00E2   char REG[]="+CREG:";
; 0000 00E3   d=strstr(rx_buffer, REG);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;	c -> R17
;	*d -> R18,R19
;	REG -> Y+4
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00E4   d=d+9;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00E5   c=*d;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00E6   #asm("wdr")
;PCODE: $000000A7 VOL: 0
	wdr
;PCODE: $000000A8 VOL: 0
; 0000 00E7   CLEAR_BUF();
;PCODE: $000000A9 VOL: 0
; 0000 00E8   return c;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00E9   }
;PCODE: $000000AE VOL: 0
;//**********************************************************************************************************
;char SET_NR(void) // Функция считывания телефонного номера с SIM карты
; 0000 00EC {
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00ED char c;
; 0000 00EE char *d;
; 0000 00EF 
; 0000 00F0 d=strstr(rx_buffer, ",\"+7");
;PCODE: $000000B1 VOL: 0
;	c -> R17
;	*d -> R18,R19
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00F1 if (d==NULL){c=0;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00F2           return c;}
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00F3   d=d+4;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00F4   i=0;
;PCODE: $000000C4 VOL: 0
; 0000 00F5   while(i<12)
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00F6   {
; 0000 00F7   NR[i++]=*d;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00F8    d=d-1;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00F9    NR[i++]=*d;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00FA    d=d+3;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00FB   }
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00FC   NR[10]='F';
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00FD   #asm("wdr")
;PCODE: $000000E7 VOL: 0
	wdr
;PCODE: $000000E8 VOL: 0
; 0000 00FE   CLEAR_BUF();
;PCODE: $000000E9 VOL: 0
; 0000 00FF   c=1;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 0100   return c;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 0101 }
;PCODE: $000000F0 VOL: 0

	.DSEG
_0x23:
	.BYTE 0x5
;
;//**********************************************************************************************************
;// Функция проверки балланса
; void BALLANSE(void)
; 0000 0106  {   unsigned char S;

	.CSEG
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0107    // char XY[2];
; 0000 0108     unsigned char *s1, *s2;
; 0000 0109     delay_ms(4000);
;PCODE: $000000F3 VOL: 0
;	S -> R17
;	*s1 -> R18,R19
;	*s2 -> R20,R21
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 010A     CLEAR_BUF();
;PCODE: $000000F7 VOL: 0
; 0000 010B   do
;PCODE: $000000F8 VOL: 0
; 0000 010C    { if(OP==0) SEND_Str("AT+CUSD=1,\"*100#\"\r"); //Отправа запроса балланса
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 010D      else SEND_Str("AT+CUSD=1,\"*102#\"\r");
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 010E    delay_ms(500);
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 010F    #asm("wdr")
;PCODE: $0000010B VOL: 0
	wdr
;PCODE: $0000010C VOL: 0
; 0000 0110     }while(TEST_OK()==0);
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 0111     for(i=0;i<5;i++)
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 0112     {
; 0000 0113      if(strstr(rx_buffer, "+CUSD:")!=NULL) break;   //Ожидание ответа на запрос
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 0114      #asm("wdr")
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
	wdr
;PCODE: $00000127 VOL: 0
; 0000 0115      delay_ms(1000);
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 0116      #asm("wdr")
;PCODE: $0000012B VOL: 0
	wdr
;PCODE: $0000012C VOL: 0
; 0000 0117     }
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 0118     s1=strstr(rx_buffer, "04110430043B0430043D0441");
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 0119     if(s1!=NULL)
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 011A     {
; 0000 011B     s2=strstr(rx_buffer, "0440");
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 011C     S=((s2-s1+4)/2)+13;
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 011D    // sprintf(XY, "%02d", S);
; 0000 011E    // XX[0]=XY[0];
; 0000 011F    // XX[1]=XY[1];
; 0000 0120 
; 0000 0121     printf("AT+CMGS=%02d\r",S) ;
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 0122     delay_ms(100);
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 0123     #asm("wdr")
;PCODE: $00000156 VOL: 0
	wdr
;PCODE: $00000157 VOL: 0
; 0000 0124      SEND_Str("0001000B91");     // Ввод настроек PDU
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 0125 
; 0000 0126       for(i=0;i<12;i++)            // Ввод номера
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 0127       {UART_Transmit(NR[i]);}
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 0128       S=S-13;
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 0129       printf("0008%02X", S);
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 012A       s2=s2+4;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 012B       do{
;PCODE: $00000180 VOL: 0
; 0000 012C        UART_Transmit(*s1);
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 012D        s1++;
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 012E       }while(s1!=s2);
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 012F       UART_Transmit(0x1A);
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 0130              /*
; 0000 0131       delay_ms(1000);
; 0000 0132   for (i=0; i<256; i++)    // Запись буфера приема в eeprom
; 0000 0133       {eebuffer[i]=rx_buffer[i];}
; 0000 0134              */
; 0000 0135       }
; 0000 0136       CLEAR_BUF();
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 0137  }
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0

	.DSEG
_0x31:
	.BYTE 0x25
;//********************************************************************************************
;//*******************ФУНКЦИИ ДЛЯ РАБОТЫ С ТРАНСИВЕРОМ*****************************************
;//============================================================================================
;unsigned char SPI_SEND(unsigned char data)  // Передать/принять байт  по SPI
; 0000 013C {

	.CSEG
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 013D SPDR = data;
;	data -> Y+0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 013E 		while (!(SPSR & (1<<SPIF)));
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 013F 		return SPDR;
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 0140 }
;PCODE: $000001A3 VOL: 0
;
;//*******************************************************************************************
;//записать в регистр трансивера значение
;	void TR24_Wrtie(unsigned char reg,unsigned int data)
; 0000 0145 	{
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 0146 		union U
; 0000 0147 		{
; 0000 0148 			unsigned int buf;
; 0000 0149 			unsigned char b[2];
; 0000 014A 		};
; 0000 014B        union U dat;
; 0000 014C 		dat.buf=data;
;PCODE: $000001A6 VOL: 0
;	reg -> Y+4
;	data -> Y+2
;	U -> Y+2
;	dat -> Y+0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 014D 
; 0000 014E 		PORTB.2=0;       // SPI_SS ON
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 014F 		SPI_SEND(reg);    //регистр
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 0150 		delay_us(2);
;PCODE: $000001AE VOL: 0
; 0000 0151 		SPI_SEND(dat.b[1]);   //старшая часть
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 0152 		delay_us(2);
;PCODE: $000001B2 VOL: 0
; 0000 0153 		SPI_SEND(dat.b[0]);   //младшая часть
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 0154 		delay_us(2);
;PCODE: $000001B6 VOL: 0
; 0000 0155 		PORTB.2=1;     // SPI_SS OFF
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 0156         #asm("wdr")
;PCODE: $000001B9 VOL: 0
	wdr
;PCODE: $000001BA VOL: 0
; 0000 0157 	}//end writeByte
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;//*******************************************************************************************
; //Чтение из регистра трансивера
;	unsigned int TR24A_Read(unsigned char reg)
; 0000 015B 	{
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 015C 		union U
; 0000 015D 		{
; 0000 015E 			unsigned int buf;
; 0000 015F 			unsigned char b[2];
; 0000 0160 		};
; 0000 0161            union U dat;
; 0000 0162 		PORTB.2=0;       // SPI_SS ON
;PCODE: $000001C0 VOL: 0
;	reg -> Y+2
;	U -> Y+2
;	dat -> Y+0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 0163 		SPI_SEND(reg |0x80);   //Старший бит определяет операцию
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 0164 		delay_us(2);
;PCODE: $000001C7 VOL: 0
; 0000 0165 		dat.b[1]=SPI_SEND(0x0FF);
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 0166 		delay_us(2);
;PCODE: $000001CC VOL: 0
; 0000 0167 		dat.b[0]=SPI_SEND(0x0FF);
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 0168 		delay_us(2);
;PCODE: $000001D1 VOL: 0
; 0000 0169 		PORTB.2=1;     // SPI_SS OFF
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 016A          #asm("wdr")
;PCODE: $000001D4 VOL: 0
	wdr
;PCODE: $000001D5 VOL: 0
; 0000 016B 		return dat.buf;
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 016C 	}//end readByte
;PCODE: $000001D9 VOL: 0
;//*******************************************************************************************
;//Инициализация трансивера
;	void TR24A_INIT(void)
; 0000 0170 	{
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 0171 
; 0000 0172 		union U
; 0000 0173 		{
; 0000 0174 			unsigned int data;     //значение регистра
; 0000 0175 			unsigned char b[2];
; 0000 0176 		};
; 0000 0177         union U dt;
; 0000 0178                 /*
; 0000 0179 		chanel=76;   //канал по умолчанию
; 0000 017A 		swallow=9;    //делитель частоты по умолчанию
; 0000 017B 		Error.byte=0; //обнулить все ошибки
; 0000 017C 		ProgCRC=0;    //программное CRC выкл
; 0000 017D 		TrState=0;    //предыдущей режим работы трансивера, необходимо для приема пакета
; 0000 017E                   */
; 0000 017F 		//reset();
; 0000 0180 
; 0000 0181 		unsigned char i;
; 0000 0182         PORTB.0=0;      // Сброс трансивера перед инициализацией
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;	U -> Y+3
;	dt -> Y+1
;	i -> R17
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 0183      delay_ms(10);
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 0184      PORTB.0=1;
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 0185      delay_ms(5);
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 0186 		for(i=0;i<30;i=i+3)				//инициализация кадра
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 0187 		{
; 0000 0188 			dt.b[1]=tbl_frame[i+1];
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 0189 			dt.b[0]=tbl_frame[i+2];
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 018A 			TR24_Wrtie(tbl_frame[i],dt.data);
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 018B 		}
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 018C 
; 0000 018D 		delay_ms(5);
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 018E 		for(i=0;i<54;i=i+3)		       //инициализация передатчика
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 018F 		{
; 0000 0190 			dt.b[1]=tbl_rfinit[i+1];
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 0191 			dt.b[0]=tbl_rfinit[i+2];
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 0192 			TR24_Wrtie(tbl_rfinit[i],dt.data);
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 0193 		}
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 0194            Error='N';
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0000 0195 		//Проверить правильность инициализации трансивера
; 0000 0196             #asm("wdr")
;PCODE: $00000231 VOL: 0
	wdr
;PCODE: $00000232 VOL: 0
; 0000 0197 		for(i=0;i<54;i=i+3)
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0000 0198 		{
; 0000 0199 			dt.data=TR24A_Read(tbl_rfinit[i]);
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0000 019A 
; 0000 019B 			if(dt.b[1]!=tbl_rfinit[i+1])
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
; 0000 019C 			{
; 0000 019D 				Error='E';
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0000 019E 			}
; 0000 019F 			else if(dt.b[0]!=tbl_rfinit[i+2])
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0000 01A0 			{
; 0000 01A1 				Error='E';
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
; 0000 01A2 			}
; 0000 01A3 
; 0000 01A4 		}
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 01A5             #asm("wdr")
;PCODE: $00000260 VOL: 0
	wdr
;PCODE: $00000261 VOL: 0
; 0000 01A6 		for(i=0;i<30;i=i+3)
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0000 01A7 		{
; 0000 01A8 			dt.data=TR24A_Read(tbl_frame[i]);
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0000 01A9 
; 0000 01AA 			if(dt.b[1]!=tbl_frame[i+1])
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0000 01AB 			{
; 0000 01AC 				Error='E';
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0000 01AD 			}
; 0000 01AE 			else if(dt.b[0]!=tbl_frame[i+2])
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0000 01AF 			{
; 0000 01B0 				Error='E';
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
; 0000 01B1 			}
; 0000 01B2 		}
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
; 0000 01B3 
; 0000 01B4 	}//end init
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;//*************************************************************************************************
;//Режим приема данных
;	void TR24A_RX(void)
; 0000 01B8 	{
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
; 0000 01B9 		DATA buf;
; 0000 01BA 
; 0000 01BB         #asm("wdr")
;PCODE: $00000296 VOL: 0
;	buf -> Y+0
;PCODE: $00000297 VOL: 0
	wdr
;PCODE: $00000298 VOL: 0
; 0000 01BC 		buf.data=TR24A_Read(0x07);
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
; 0000 01BD 		buf.byte[1]=(SW<<1);
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
; 0000 01BE 		buf.byte[0]=CH;
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
; 0000 01BF 		buf.Bit.b8=0;
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
; 0000 01C0 		buf.Bit.b7=1;
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
; 0000 01C1 
; 0000 01C2 		TR24_Wrtie(0x07,buf.data);  // переход в режим RX, задаем канал
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
; 0000 01C3 		delay_us(10);
;PCODE: $000002AD VOL: 0
; 0000 01C4 
; 0000 01C5 	}//end ReciveMode
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;//*******************************************************************************************
;//перейти в режим передачи данніх
;	void TR24A_TX(void)
; 0000 01C9 	{
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
; 0000 01CA 		DATA buf;
; 0000 01CB         #asm("wdr")
;PCODE: $000002B3 VOL: 0
;	buf -> Y+0
;PCODE: $000002B4 VOL: 0
	wdr
;PCODE: $000002B5 VOL: 0
; 0000 01CC 		buf.data=TR24A_Read(0x07);
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
; 0000 01CD 		buf.byte[1]=(SW<<1);
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 0000 01CE 		buf.byte[0]=CH;
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
; 0000 01CF 		buf.Bit.b8=1;
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 0000 01D0 		buf.Bit.b7=0;
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
; 0000 01D1 
; 0000 01D2 		TR24_Wrtie(0x07,buf.data);
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0000 01D3 
; 0000 01D4 	}//end TransmitMode
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;//*********************************************************************************************
;//Прием пакта
;  unsigned char TR24A_RXPKT(void)
; 0000 01D8   {
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
; 0000 01D9    unsigned char len; //Длинна пакета
; 0000 01DA    unsigned char j;   //Счетчик
; 0000 01DB 
; 0000 01DC   PORTB.2=0;       // SPI_SS ON
;PCODE: $000002CF VOL: 0
;	len -> R17
;	j -> R16
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
; 0000 01DD    #asm("wdr")
;PCODE: $000002D2 VOL: 0
	wdr
;PCODE: $000002D3 VOL: 0
; 0000 01DE   SPI_SEND(0x50|(1<<7));   //reg80
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
; 0000 01DF   delay_us(3);
;PCODE: $000002D7 VOL: 0
; 0000 01E0   len=SPI_SEND(0xFF);
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0000 01E1   for(j=0;j<len;j++)  //получить пакет
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
; 0000 01E2 		{
; 0000 01E3 			delay_us(3);
;PCODE: $000002E5 VOL: 0
; 0000 01E4 			SPI_buffer[j] = SPI_SEND(0xFF);
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
; 0000 01E5 		}
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
; 0000 01E6  PORTB.2=1;     // SPI_SS OFF
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
; 0000 01E7  return len;
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
; 0000 01E8 
; 0000 01E9   }
;PCODE: $000002F9 VOL: 0
;//******************************************************************************************
;   //Функция передачи пакета
; void TR24A_TXPKT(void)
; 0000 01ED  {
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
; 0000 01EE 
; 0000 01EF     #asm("wdr")
;PCODE: $000002FC VOL: 0
	wdr
;PCODE: $000002FD VOL: 0
; 0000 01F0    TR24_Wrtie(0x52,0x8000);
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
; 0000 01F1 
; 0000 01F2       PORTB.2=0;       // SPI_SS ON
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
; 0000 01F3       delay_us(3);
;PCODE: $00000305 VOL: 0
; 0000 01F4       SPI_SEND(0x50);
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
; 0000 01F5       delay_us(3);
;PCODE: $00000309 VOL: 0
; 0000 01F6       SPI_SEND(pktlen);
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
; 0000 01F7       for (i=0;i<pktlen;i++)
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
; 0000 01F8      {
; 0000 01F9        delay_us(3);
;PCODE: $00000318 VOL: 0
; 0000 01FA       SPI_SEND(SPI_buffer[i]);
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
; 0000 01FB     };
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
; 0000 01FC 
; 0000 01FD       PORTB.2=1;       // SPI_SS OFF
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
; 0000 01FE 
; 0000 01FF       delay_us(3);
;PCODE: $00000327 VOL: 0
; 0000 0200        TR24A_TX();
;PCODE: $00000328 VOL: 0
; 0000 0201  }
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;//********************************************************************************************
;  // Запись строки в SPI буффер
; void Write_SPI_buffer(flash char *str)
; 0000 0205  {
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
; 0000 0206   i=0;
;	*str -> Y+0
;PCODE: $0000032D VOL: 0
; 0000 0207   while(*str)
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
; 0000 0208   {
; 0000 0209   SPI_buffer[i++]=*str++;
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
; 0000 020A 
; 0000 020B   }
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
; 0000 020C   pktlen=i;
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
; 0000 020D   }
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;//********************************************************************************************
; void USART_ON(void)   //Активация USART
; 0000 0210   {
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
; 0000 0211    PORTD.4=0;
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
; 0000 0212    PORTD.5=0;
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
; 0000 0213    while(PIND.6==1);
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
; 0000 0214   }
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;//*******************************************************************************************
; void USART_OFF(void)   //Деактивация USART
; 0000 0217  {
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
; 0000 0218  PORTD.4=1;
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
; 0000 0219  PORTD.5=1;
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
; 0000 021A  }
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;//********************************************************************************************
;void RESET_MODEM(void)    // Сброс модема
; 0000 021D  {LightDiode(3);
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
; 0000 021E   do {
;PCODE: $00000361 VOL: 0
; 0000 021F  //delay_ms(250);
; 0000 0220   if (PINC.1==0)
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
; 0000 0221   {
; 0000 0222   PORTC.0=0;       // Включение модема
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
; 0000 0223   delay_ms(1000);
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
; 0000 0224   PORTC.0=1;
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
; 0000 0225   delay_ms(250);
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
; 0000 0226    }
; 0000 0227 
; 0000 0228    else
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
; 0000 0229    {
; 0000 022A     PORTC.2=0;       // Включение модема
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
; 0000 022B   delay_ms(100);
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
; 0000 022C   PORTC.2=1;
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
; 0000 022D   delay_ms(1000);
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
; 0000 022E    }
;PCODE: $0000037B VOL: 0
; 0000 022F 
; 0000 0230     } while(PINC.1==0);   // Проверка включения модема
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
; 0000 0231        USART_ON();
;PCODE: $00000382 VOL: 0
; 0000 0232 
; 0000 0233     do{      SEND_Str("AT\r");  // Проверка ответа модема
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
; 0000 0234          #asm("wdr")
;PCODE: $00000388 VOL: 0
	wdr
;PCODE: $00000389 VOL: 0
; 0000 0235       } while(TEST_OK()==0)  ;
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
; 0000 0236                  /*
; 0000 0237 
; 0000 0238     SEND_Str("AT+CREG?\r");
; 0000 0239          delay_ms(100);
; 0000 023A        SEND_Str("HER?\r");
; 0000 023B        delay_ms(1000);
; 0000 023C          for( i=0;i<64;i++) {eebuf[i]=rx_buffer[i];}
; 0000 023D           LightDiode(0);
; 0000 023E           while(1){  #asm("wdr") }
; 0000 023F                     */
; 0000 0240  do{   SEND_Str("AT+CREG?\r");   // Проверка регистрации в сети
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
; 0000 0241         #asm("wdr")
;PCODE: $00000395 VOL: 0
	wdr
;PCODE: $00000396 VOL: 0
; 0000 0242       delay_ms(1000);
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
; 0000 0243       #asm("wdr")
;PCODE: $0000039A VOL: 0
	wdr
;PCODE: $0000039B VOL: 0
; 0000 0244       }while (REG_NET()!='1') ;
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
; 0000 0245 
; 0000 0246      // USART_OFF();
; 0000 0247 
; 0000 0248  }
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;//********************************************************************************************
;void RESET_TR24A(void)   // Перезагрузка и инициализация трансивера
; 0000 024B {
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
; 0000 024C  LightDiode(3);
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
; 0000 024D  do { TR24A_INIT();  // Инициализация трансивера
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
; 0000 024E  #asm("wdr")
;PCODE: $000003AB VOL: 0
	wdr
;PCODE: $000003AC VOL: 0
; 0000 024F     }while(Error=='E') ;   // Если инициализация ошибочна возврат к сбросу
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
; 0000 0250 }
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;
;//============================================================================================
;// Прерывание по приему пакета
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0256 {
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
; 0000 0257      GICR=0x00; //Запрет внешних прерываний
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
; 0000 0258 
; 0000 0259  pktlen=TR24A_RXPKT();
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
; 0000 025A 
; 0000 025B if (pktlen!=0)
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
; 0000 025C   {
; 0000 025D 
; 0000 025E         #asm("wdr")
;PCODE: $000003BD VOL: 0
	wdr
;PCODE: $000003BE VOL: 0
; 0000 025F  if (strstr(SPI_buffer,"BRELOK")!=NULL) {Write_SPI_buffer("DEVICE");}
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
; 0000 0260  else {
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
; 0000 0261    if (strstr(SPI_buffer,"CHANGE")!=NULL)
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
; 0000 0262    {
; 0000 0263     if(z==0) {z=1;}
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
; 0000 0264     else {z=0;}
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
; 0000 0265    }
; 0000 0266 
; 0000 0267    if(z==0)
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
; 0000 0268    {
; 0000 0269     Write_SPI_buffer("Status-IDLE");
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
; 0000 026A    }
; 0000 026B 
; 0000 026C   else
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
; 0000 026D    {
; 0000 026E     Write_SPI_buffer("Status-SECUR");
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
; 0000 026F    }
;PCODE: $000003EA VOL: 0
; 0000 0270    }
;PCODE: $000003EB VOL: 0
; 0000 0271    // delay_ms(30);
; 0000 0272     TR24A_TXPKT();
;PCODE: $000003EC VOL: 0
; 0000 0273     while(PIND.3==0);
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
; 0000 0274 
; 0000 0275 
; 0000 0276 }
; 0000 0277 
; 0000 0278   GIFR=0x80;    //Сброс флага прерывания
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
; 0000 0279   GICR=0x80;   // Разрешение прерывания
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
; 0000 027A 
; 0000 027B  TR24A_RX();              // Преход в режим RX
;PCODE: $000003F8 VOL: 0
; 0000 027C }
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0

	.DSEG
_0x8E:
	.BYTE 0xE
;//*******************************************************************************************
;
;// Функция обработки прерывания по приему символа USART
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0281 {

	.CSEG
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
; 0000 0282 char status,data;
; 0000 0283 status=UCSRA;
;PCODE: $000003FE VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
; 0000 0284 data=UDR;
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
; 0000 0285 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
; 0000 0286    {
; 0000 0287    if (rx_wr_index != RX_BUFFER_SIZE) rx_buffer[rx_wr_index++]=data;
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
; 0000 0288 
; 0000 0289       }
;PCODE: $0000040F VOL: 0
; 0000 028A    }
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;
; //*****************************************************************************************
; // Прерывание по таймеру производит тест системы
;
; // Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0291 {
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
; 0000 0292 union U
; 0000 0293 		{
; 0000 0294 			unsigned int buf;
; 0000 0295 			unsigned char b[2];
; 0000 0296 		};
; 0000 0297            union U stat;
; 0000 0298 TIMSK=0x00;
;PCODE: $00000417 VOL: 0
;	U -> Y+2
;	stat -> Y+0
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
; 0000 0299 #asm("sei")
;PCODE: $0000041A VOL: 0
	sei
;PCODE: $0000041B VOL: 0
; 0000 029A //LightDiode(0);
; 0000 029B  USART_ON() ; //  Активация USART
;PCODE: $0000041C VOL: 0
; 0000 029C 
; 0000 029D 
; 0000 029E  SEND_Str("AT+CREG?\r");   // Проверка регистрации в сети
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
; 0000 029F 
; 0000 02A0  if (REG_NET()!='1')
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
; 0000 02A1    {
; 0000 02A2    TCCR1B=0x00;
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
; 0000 02A3    #asm("wdr")
;PCODE: $00000426 VOL: 0
	wdr
;PCODE: $00000427 VOL: 0
; 0000 02A4     RESET_MODEM();
;PCODE: $00000428 VOL: 0
; 0000 02A5    #asm("wdr")
;PCODE: $00000429 VOL: 0
	wdr
;PCODE: $0000042A VOL: 0
; 0000 02A6    }
; 0000 02A7    delay_ms(30);
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
; 0000 02A8    if(COUNT>=10)
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
; 0000 02A9            {BALLANSE();
;PCODE: $00000433 VOL: 0
; 0000 02AA             COUNT=0;}
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
; 0000 02AB   USART_OFF() ; //  Дективация USART
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
; 0000 02AC 
; 0000 02AD  stat.buf=TR24A_Read(0x40);
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
; 0000 02AE  if(stat.b[1]!=0xD0)
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
; 0000 02AF  {
; 0000 02B0   TCCR1B=0x00;
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
; 0000 02B1   RESET_TR24A();
;PCODE: $00000442 VOL: 0
; 0000 02B2   TR24A_RX();              // Преход в режим RX
;PCODE: $00000443 VOL: 0
; 0000 02B3  }
; 0000 02B4 
; 0000 02B5  TIMSK=0x04;
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
; 0000 02B6  TCCR1B=0x05;
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
; 0000 02B7 }
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;//=============================================================================================
;//*****************************ОСНОВНАЯ ФУНКЦИЯ ПРОГРАММЫ*************************************
;//===============================================================================================
;
;void main(void)
; 0000 02BD {
;PCODE: $0000044D VOL: 0
; 0000 02BE // Declare your local variables here
; 0000 02BF 
; 0000 02C0 // Input/Output Ports initialization
; 0000 02C1 // Port B initialization
; 0000 02C2 // Func7=In Func6=In Func5=Out Func4=In Func3=Out Func2=Out Func1=In Func0=Out
; 0000 02C3 // State7=T State6=T State5=0 State4=T State3=0 State2=1 State1=T State0=1
; 0000 02C4 PORTB=0x05;
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
; 0000 02C5 DDRB=0x2D;
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
; 0000 02C6 
; 0000 02C7 // Port C initialization
; 0000 02C8 // Func6=In Func5=Out Func4=Out Func3=In Func2=Out Func1=In Func0=Out
; 0000 02C9 // State6=T State5=0 State4=0 State3=T State2=1 State1=T State0=1
; 0000 02CA PORTC=0x05;
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
; 0000 02CB DDRC=0x35;
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
; 0000 02CC 
; 0000 02CD // Port D initialization
; 0000 02CE // Func7=In Func6=In Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 02CF // State7=T State6=T State5=1 State4=1 State3=T State2=P State1=T State0=T
; 0000 02D0 PORTD=0x34;
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
; 0000 02D1 DDRD=0x30;
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
; 0000 02D2 
; 0000 02D3 // Timer/Counter 0 initialization
; 0000 02D4 // Clock source: System Clock
; 0000 02D5 // Clock value: Timer 0 Stopped
; 0000 02D6 TCCR0=0x00;
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
; 0000 02D7 TCNT0=0x00;
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
; 0000 02D8 
; 0000 02D9 // Timer/Counter 1 initialization
; 0000 02DA // Clock source: System Clock
; 0000 02DB // Clock value: 3,600 kHz
; 0000 02DC // Mode: Normal top=0xFFFF
; 0000 02DD // OC1A output: Discon.
; 0000 02DE // OC1B output: Discon.
; 0000 02DF // Noise Canceler: Off
; 0000 02E0 // Input Capture on Falling Edge
; 0000 02E1 // Timer1 Overflow Interrupt: On
; 0000 02E2 // Input Capture Interrupt: Off
; 0000 02E3 // Compare A Match Interrupt: Off
; 0000 02E4 // Compare B Match Interrupt: Off
; 0000 02E5 TCCR1A=0x00;
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
; 0000 02E6 TCCR1B=0x00;
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
; 0000 02E7 TCNT1H=0x00;
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
; 0000 02E8 TCNT1L=0x00;
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
; 0000 02E9 ICR1H=0x00;
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
; 0000 02EA ICR1L=0x00;
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
; 0000 02EB OCR1AH=0x00;
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
; 0000 02EC OCR1AL=0x00;
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
; 0000 02ED OCR1BH=0x00;
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
; 0000 02EE OCR1BL=0x00;
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
; 0000 02EF 
; 0000 02F0 // Timer/Counter 2 initialization
; 0000 02F1 // Clock source: System Clock
; 0000 02F2 // Clock value: Timer2 Stopped
; 0000 02F3 // Mode: Normal top=0xFF
; 0000 02F4 // OC2 output: Disconnected
; 0000 02F5 ASSR=0x00;
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
; 0000 02F6 TCCR2=0x00;
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
; 0000 02F7 TCNT2=0x00;
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
; 0000 02F8 OCR2=0x00;
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
; 0000 02F9 
; 0000 02FA // External Interrupt(s) initialization
; 0000 02FB // INT0: Off
; 0000 02FC // INT1: On
; 0000 02FD // INT1 Mode: Rising Edge
; 0000 02FE GICR|=0x80;
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
; 0000 02FF MCUCR=0x0C;
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
; 0000 0300 GIFR=0x80;
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
; 0000 0301 
; 0000 0302 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0303 TIMSK=0x00;
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
; 0000 0304 
; 0000 0305 // USART initialization
; 0000 0306 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0307 // USART Receiver: On
; 0000 0308 // USART Transmitter: On
; 0000 0309 // USART Mode: Asynchronous
; 0000 030A // USART Baud Rate: 115200
; 0000 030B UCSRA=0x00;
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
; 0000 030C UCSRB=0x98;
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
; 0000 030D UCSRC=0x86;
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
; 0000 030E UBRRH=0x00;
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
; 0000 030F UBRRL=0x01;
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
; 0000 0310 
; 0000 0311 // Analog Comparator initialization
; 0000 0312 // Analog Comparator: Off
; 0000 0313 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0314 ACSR=0x80;
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
; 0000 0315 SFIOR=0x00;
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
; 0000 0316 
; 0000 0317 // ADC initialization
; 0000 0318 // ADC disabled
; 0000 0319 ADCSRA=0x00;
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
; 0000 031A 
; 0000 031B // SPI initialization
; 0000 031C // SPI Type: Master
; 0000 031D // SPI Clock Rate: 28,800 kHz
; 0000 031E // SPI Clock Phase: Cycle Half
; 0000 031F // SPI Clock Polarity: Low
; 0000 0320 // SPI Data Order: MSB First
; 0000 0321 SPCR=0x57;
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
; 0000 0322 SPSR=0x00;
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
; 0000 0323 
; 0000 0324 // TWI initialization
; 0000 0325 // TWI disabled
; 0000 0326 TWCR=0x00;
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
; 0000 0327 // Watchdog Timer initialization
; 0000 0328 // Watchdog Timer Prescaler: OSC/2048k
; 0000 0329 #pragma optsize-
; 0000 032A WDTCR=0x1F;
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
; 0000 032B WDTCR=0x0F;
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
; 0000 032C #ifdef _OPTIMIZE_SIZE_
; 0000 032D #pragma optsize+
; 0000 032E #endif
; 0000 032F 
; 0000 0330  // Global enable interrupts
; 0000 0331 #asm("sei")
;PCODE: $0000049D VOL: 0
	sei
;PCODE: $0000049E VOL: 0
; 0000 0332 #asm("wdr")
;PCODE: $0000049F VOL: 0
	wdr
;PCODE: $000004A0 VOL: 0
; 0000 0333 LightDiode(3);    //Зажечь светодиод
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
; 0000 0334 /************** ******************* АКТИВАЦИЯ МОДЕМА*****************************************/
; 0000 0335 
; 0000 0336  RESET_MODEM();
;PCODE: $000004A4 VOL: 0
; 0000 0337 
; 0000 0338  #asm("wdr")
;PCODE: $000004A5 VOL: 0
	wdr
;PCODE: $000004A6 VOL: 0
; 0000 0339   USART_ON() ; //  Активация USART
;PCODE: $000004A7 VOL: 0
; 0000 033A 
; 0000 033B  do{     SEND_Str("AT+CPBF=\"N\"\r");  // Считывание телефонного номера с SIM карты
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
; 0000 033C        #asm("wdr")
;PCODE: $000004AD VOL: 0
	wdr
;PCODE: $000004AE VOL: 0
; 0000 033D       } while(SET_NR()==0);      // Преобразование номера в PDU формат
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
; 0000 033E 
; 0000 033F   do{ SEND_Str("AT+COPS?\r");
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
; 0000 0340   delay_ms(50);
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
; 0000 0341     #asm("wdr")
;PCODE: $000004BD VOL: 0
	wdr
;PCODE: $000004BE VOL: 0
; 0000 0342   }while(strstr(rx_buffer, "+COPS:")==NULL);
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
; 0000 0343  if( strstr(rx_buffer, "Beeline")!=NULL ) OP=1;
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
;PCODE: $000004D4 VOL: 0
; 0000 0344   else OP=0;
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
; 0000 0345    CLEAR_BUF();
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
; 0000 0346   USART_OFF() ;  //  Дективация USART
;PCODE: $000004DC VOL: 0
; 0000 0347   #asm("wdr")
;PCODE: $000004DD VOL: 0
	wdr
;PCODE: $000004DE VOL: 0
; 0000 0348 //==========================================================================================
; 0000 0349 //*************************АКТИВАЦИЯ ТРАНСИВЕРА**********************************************
; 0000 034A   RESET_TR24A();
;PCODE: $000004DF VOL: 0
; 0000 034B   TR24A_RX();              // Преход в режим RX
;PCODE: $000004E0 VOL: 0
; 0000 034C 
; 0000 034D 
; 0000 034E //============================================================================================
; 0000 034F  TIMSK=0x04;
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
; 0000 0350  TCCR1B=0x05;
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
; 0000 0351  z=1; // Включение режима охраны
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
; 0000 0352 
; 0000 0353 
; 0000 0354 while (1)
;PCODE: $000004E7 VOL: 0
; 0000 0355       {
; 0000 0356 
; 0000 0357 mx:      while((PIND.2==1)||(z==0))  // Цикл пока дверь открыта
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
; 0000 0358        { #asm("wdr")
;PCODE: $000004F2 VOL: 0
	wdr
;PCODE: $000004F3 VOL: 0
; 0000 0359        if (z==0){LightDiode(0);}
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
; 0000 035A        else {LightDiode(2);}
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
;PCODE: $000004FE VOL: 0
; 0000 035B        }
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
; 0000 035C        delay_ms(100);
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
; 0000 035D 
; 0000 035E        if(PIND.2==1) goto mx;
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
; 0000 035F my:       while((PIND.2==0) || (z==0) )           // Цикл пока дверь закрыта
;PCODE: $00000508 VOL: 0
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
; 0000 0360        {   #asm("wdr")
;PCODE: $00000514 VOL: 0
	wdr
;PCODE: $00000515 VOL: 0
; 0000 0361        if (z==0){LightDiode(0);}
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
; 0000 0362        else {LightDiode(1);}
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
; 0000 0363        }
;PCODE: $00000521 VOL: 0
;PCODE: $00000522 VOL: 0
; 0000 0364        delay_ms(100);
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
; 0000 0365 
; 0000 0366        if(PIND.2==0) goto my;
;PCODE: $00000526 VOL: 0
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
;PCODE: $00000529 VOL: 0
; 0000 0367        USART_ON() ;
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
; 0000 0368          TCNT1H=0x00;
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
; 0000 0369          TCNT1L=0x01;
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
; 0000 036A        // TIMSK=0x00;
; 0000 036B        // TCCR1B=0x00;
; 0000 036C m4:    SEND_Str("AT+CMGF=0\r");     // Установка PDU режима
;PCODE: $00000530 VOL: 0
;PCODE: $00000531 VOL: 0
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
;PCODE: $00000534 VOL: 0
; 0000 036D         #asm("wdr")
;PCODE: $00000535 VOL: 0
	wdr
;PCODE: $00000536 VOL: 0
; 0000 036E        if (TEST_OK()==0) goto m4 ;
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0
; 0000 036F 
; 0000 0370 
; 0000 0371 
; 0000 0372 
; 0000 0373 m5:   SEND_Str("AT+CMGS=39\r");  //    Ввод команды отправки сообщения
;PCODE: $0000053B VOL: 0
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
;PCODE: $00000540 VOL: 0
; 0000 0374         #asm("wdr")
;PCODE: $00000541 VOL: 0
	wdr
;PCODE: $00000542 VOL: 0
; 0000 0375       if (strrchr(rx_buffer, '>')==NULL)
;PCODE: $00000543 VOL: 0
;PCODE: $00000544 VOL: 0
;PCODE: $00000545 VOL: 0
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
;PCODE: $00000548 VOL: 0
;PCODE: $00000549 VOL: 0
; 0000 0376       {CLEAR_BUF();
;PCODE: $0000054A VOL: 0
; 0000 0377       goto m5;}
;PCODE: $0000054B VOL: 0
; 0000 0378       CLEAR_BUF();
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
; 0000 0379 
; 0000 037A       SEND_Str("0001000B91");     // Ввод настроек PDU
;PCODE: $0000054E VOL: 0
;PCODE: $0000054F VOL: 0
;PCODE: $00000550 VOL: 0
;PCODE: $00000551 VOL: 0
; 0000 037B 
; 0000 037C       for(i=0;i<12;i++)            // Ввод номера
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
;PCODE: $00000556 VOL: 0
;PCODE: $00000557 VOL: 0
;PCODE: $00000558 VOL: 0
;PCODE: $00000559 VOL: 0
;PCODE: $0000055A VOL: 0
; 0000 037D       {UART_Transmit(NR[i]);}
;PCODE: $0000055B VOL: 0
;PCODE: $0000055C VOL: 0
;PCODE: $0000055D VOL: 0
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
;PCODE: $00000561 VOL: 0
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
; 0000 037E 
; 0000 037F        SEND_Str("00081A0414043204350440044C0020043E0442043A0440044B04420430\x1A"); // Ввод текста сообщения
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
; 0000 0380 
; 0000 0381        /* if(COUNT==10)
; 0000 0382            {BALLANSE();
; 0000 0383             COUNT=0;}*/
; 0000 0384          COUNT++;
;PCODE: $0000056A VOL: 0
;PCODE: $0000056B VOL: 0
;PCODE: $0000056C VOL: 0
;PCODE: $0000056D VOL: 0
;PCODE: $0000056E VOL: 0
; 0000 0385                #asm("wdr")
;PCODE: $0000056F VOL: 0
	wdr
;PCODE: $00000570 VOL: 0
; 0000 0386               CLEAR_BUF();
;PCODE: $00000571 VOL: 0
; 0000 0387              USART_OFF() ;  //  Дективация USART
;PCODE: $00000572 VOL: 0
; 0000 0388              #asm("wdr")
;PCODE: $00000573 VOL: 0
	wdr
;PCODE: $00000574 VOL: 0
; 0000 0389               TCNT1H=0x01;
;PCODE: $00000575 VOL: 0
;PCODE: $00000576 VOL: 0
; 0000 038A               TCNT1L=0x4F;
;PCODE: $00000577 VOL: 0
;PCODE: $00000578 VOL: 0
; 0000 038B               TCCR1B=0x05;
;PCODE: $00000579 VOL: 0
;PCODE: $0000057A VOL: 0
; 0000 038C               TIMSK=0x04;
;PCODE: $0000057B VOL: 0
;PCODE: $0000057C VOL: 0
; 0000 038D       }
;PCODE: $0000057D VOL: 0
;PCODE: $0000057E VOL: 0
; 0000 038E 
; 0000 038F }
;PCODE: $0000057F VOL: 0
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0

	.DSEG
_0xA3:
	.BYTE 0xF
