;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : Test Board_CC1101(26800KHz)
;Version : 1
;Date    : 06.05.2012
;Author  : Alexandr Gordejchik
;Company : NTS
;Comments:
;
;
;Chip type               : ATtiny44
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 64
;*****************************************************/
;
;#include <tiny44.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x18
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x18
;PCODE: $00000007 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000008 VOL: 0
	#endif
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
;#include <delay.h>
;#include <string.h>
;#include <stdlib.h>
;
;
;
;//++++++++++++ Определение строб-комманд трансивера+++++++++++++++++++++++++++++++++++++++++++++++++++++
;#define SRES 0x30 //Сброс трансивера
;#define SIDLE 0x36 //Переход в режим IDLE
;#define SCAL 0x33   // Калибровка частотного синтезатора
;#define SRX 0x34   // Переход в режим RX
;#define STX 0x35   // Переход в режим TX
;#define SFRX 0x3A  // Очистка RX FIFO
;#define SFTX 0x3B  // Очистка TX FIFO
;#define SNOP 0x3D  // Пустая строб-команда
;#define SPWD 0x39  //Переходв SLEEP режим
;//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; // Массив инициализации регистров (старший байт - адрес, младший - значение)
;flash unsigned int init[35]=
;{
; 0x000E, //0 IOGFG2 Обнаружение несущей
; 0x0206, //1 IOGFG0 Прием-передача пакета
; 0x06FF, //2 PKTLEN Длинна пакета
; 0x0704, //3 PKRCTRL1 Контроль пакета
; 0x0805, //4 PKRCTRL0 Контроль пакета
; 0x0901, //5 ADDR Адрес устройства
; 0x0A2F, //6 CHANNR Номер канала
; 0x0B06, //7 FSCTRL1 Параметры контроля синтезатора частоты
; 0x0C00, //8 FSCTRL0 Параметры контроля синтезатора частоты
; 0x0D10, //9 FREQ2 Параметы опорной частоты
; 0x0E09, //10 FREQ1 Параметы опорной частоты
; 0x0F7B, //11 FREQ0 Параметы опорной частоты
; 0x1085, //12 MDMCFG4 Конфигурация модема
; 0x1178, //13 MDMCFG3 Конфигурация модема
; 0x1203, //14 MDMCFG2 Конфигурация модема
; 0x1302, //15 MDMCFG1 Конфигурация модема
; 0x14E5, //16 MDMCFG0 Конфигурация модема
; 0x1514, //17 DEVIATION Девиация
; 0x1730, //18 MCSM1 Конфигурация автомата контроля радио
; 0x1818, //19 MCSM0 Конфигурация автомата контроля радио
; 0x1916, //20 FOCCFG Компенсация сдвига частоты
; 0x1A6C, //21 BSCFG Конфигурация побитовой синхронизации
; 0x1BC0, //22 AGCCTRL2 Пармаметры приемного тракта
; 0x1C00, //23 AGCCTRL1 Пармаметры приемного тракта
; 0x1DB2, //24 AGCCTRL0 Пармаметры приемного тракта
; 0x21B6, //25 FREND1 Параметры приемного тракта
; 0x2210, //26 FREND0 Параметры передающего тракта
; 0x23E9, //27 FSCAL3 Параметры калибровки синтезатора частоты
; 0x242A, //28 FSCAL2 Параметры калибровки синтезатора частоты
; 0x2500, //29 FSCAL1 Параметры калибровки синтезатора частоты
; 0x261F, //30 FSCAL0 Параметры калибровки синтезатора частоты
; 0x2959, //31 FSTEST Проверка синтезаторы частоты
; 0x2C81, //32 TEST2
; 0x2D35, //33 TEST1
; 0x2E09  //34 TEST0
;};
;//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;union U      // Определение объединения
;		{
;			unsigned int buf;
;			unsigned char b[2];
;		};
;
;//union U FREQ;
;//union U FR1;
;//union U FR0;
;
;// Определение глобальных переменных
;unsigned char i;   //Основной счетчик
;unsigned char SPI_buffer[64];
;unsigned char len;
;//eeprom unsigned char ST;
;eeprom unsigned char STAT[37];
;//*******************************************************************************************
;//*******************************************************************************************
;//*******************ФУНКЦИИ ДЛЯ РАБОТЫ С ТРАНСИВЕРОМ*****************************************
;//============================================================================================
;// Функция передачи символа по SPI
;unsigned char SPI_SEND(unsigned char data)
; 0000 0067 {

	.CSEG
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
; 0000 0068  USIDR=data;      // Загрузка данных в сдвиговый регистр
;	data -> Y+0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0069  USISR=(1<<USIOIF);  // Очистка флага переполнения и 4-битного счетчика
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 006A  TIFR0 |= (1<<OCF0A);   // Очистка флага прерывания по совпадению таймера
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 006B  TIMSK0 |= (1<<OCIE0A); // Разрешение прерывания по совпадению
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 006C  while(USISR.USIOIF==0); //Ожидание конца передачи байта
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 006D  TIMSK0=0x00;     //Запрет прерывания
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 006E  return USIDR; // Возврат данных
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 006F  }
;PCODE: $00000022 VOL: 0
;
;//*******************************************************************************************
; void RESET_TR(void) //Сброс трансивера по включению питания
; 0000 0073 {
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0074 USICR=0x00; //Отключение SPI
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0075 PORTA.4=1; //Устанавливаем 1 на SCK
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0076 PORTA.5=0;  // Устанавливаем 0 на MOSI
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0077 PORTA.3=0; // SPI_SS ON
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0078 delay_us(1);
;PCODE: $0000002D VOL: 0
; 0000 0079 PORTA.3=1; // SPI_SS OFF
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 007A delay_us(40);
;PCODE: $00000030 VOL: 0
; 0000 007B USICR=0x1A; //Включение SPI
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 007C PORTA.3=0; // SPI_SS ON
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 007D while(PINA.6==1); //Ждем 0 на MISO
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 007E SPI_SEND(SRES);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 007F PORTA.3=1; // SPI_SS OFF
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0080 }
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;//*******************************************************************************************
;void WRITE_REG( unsigned int reg) // Функция записи регистра
; 0000 0083 {  union U dat;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0084 PORTA.3=0; // SPI_SS ON
;PCODE: $00000044 VOL: 0
;	reg -> Y+2
;	dat -> Y+0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0085 while(PINA.6==1); //Ждем 0 на MISO
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0086 
; 0000 0087  dat.buf=reg;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0088  SPI_SEND(dat.b[1]);  //Адрес регистра
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0089  SPI_SEND(dat.b[0]);  //Значение регистра
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 008A  PORTA.3=1; // SPI_SS OFF
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 008B }
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;//********************************************************************************************
;unsigned char READ_REG(unsigned char adr)  // Функция чтения регистра
; 0000 008E {  unsigned char reg;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 008F    PORTA.3=0; // SPI_SS ON
;PCODE: $0000005C VOL: 0
;	adr -> Y+1
;	reg -> R17
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0090    while(PINA.6==1); //Ждем 0 на MISO
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0091    SPI_SEND(adr | 0x80);   // Старший бит определяет операцию
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0092    reg= SPI_SEND(0x00);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0093    return reg;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0094    PORTA.3=1; // SPI_SS OFF
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0095 }
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;//**********************************************************************************************
; void INIT_TR(void) //Функция инициализации трансивера
; 0000 0098  {
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0099 
; 0000 009A 
; 0000 009B   for (i=0;i<35;i++)
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 009C    {
; 0000 009D     WRITE_REG(init[i]);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 009E     };
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 009F 
; 0000 00A0 
; 0000 00A1 
; 0000 00A2  }
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;//********************************************************************************************
;void WRITE_PATABLE(void)    //Запись таблицы мощности
; 0000 00A5 {
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00A6 PORTA.3=0; // SPI_SS ON
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00A7    while(PINA.6==1); //Ждем 0 на MISO
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00A8 WRITE_REG(0x3EC0);         //Запись значения выходной мощности передатчика +1dbm
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00A9    PORTA.3=1; // SPI_SS OFF
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00AA }
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;//*********************************************************************************************
;void STROB(unsigned char strob)  //Запись строб-команды
; 0000 00AD {
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00AE PORTA.3=0; // SPI_SS ON
;	strob -> Y+0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00AF  while(PINA.6==1); //Ждем 0 на MISO
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00B0  SPI_SEND(strob);
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00B1   PORTA.3=1; // SPI_SS OFF
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00B2 }
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;//******************************************************************************************
;unsigned char STATUS(void)
; 0000 00B5 { unsigned char st;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00B6 PORTA.3=0; // SPI_SS ON
;PCODE: $000000B5 VOL: 0
;	st -> R17
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00B7 while(PINA.6==1); //Ждем 0 на MISO
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00B8 st=SPI_SEND(SNOP);
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00B9 PORTA.3=1; // SPI_SS OFF
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00BA return st;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00BB }
;PCODE: $000000C7 VOL: 0
;//********************************************************************************************
;void SEND_PAKET(unsigned char pktlen) //Функция передачи пакета
; 0000 00BE {
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00BF   STROB(SIDLE);  //Переход в режим IDLE
;	pktlen -> Y+0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00C0   STROB(SFRX);  //Очистка приемного буфера
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00C1   STROB(SFTX); //Очистка передающего буфера
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00C2   delay_ms(1);
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00C3   PORTA.3=0; // SPI_SS ON
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00C4  while(PINA.6==1); //Ждем 0 на MISO
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00C5   SPI_SEND(0x7F);   //Открытие буфера на запись
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00C6   SPI_SEND(pktlen); //Запись длинны пакета
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00C7   for (i=0;i<pktlen;i++)  //Запмсь пакета
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00C8   {
; 0000 00C9    SPI_SEND(SPI_buffer[i]);
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00CA   }
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00CB PORTA.3=1; // SPI_SS OFF
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00CC   //GICR=0x00; //Запрет прерывания по приему пакета
; 0000 00CD   STROB(STX); //Включение передачи
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00CE 
; 0000 00CF  while(PINA.0==0);
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00D0  while(PINA.0==1);
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00D1   STROB(SIDLE);  //Переход в режим IDLE
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00D2   STROB(SFRX);  //Очистка приемного буфера
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00D3   STROB(SFTX); //Очистка передающего буфера
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00D4  // GIFR=0xFF;  //Сброс флага прерывания
; 0000 00D5   //GICR=0xC0;   //Разрешение прерывания по приему пакета
; 0000 00D6 }
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;//********************************************************************************************
;unsigned char RECEIVE_PAKET(void) //Функция приема пакета
; 0000 00D9 {
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00DA unsigned char pktlen;
; 0000 00DB STROB(SIDLE);  //Переход в режим IDLE
;PCODE: $00000114 VOL: 0
;	pktlen -> R17
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00DC PORTB.2=0; // SPI_SS ON
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00DD  PORTA.3=0; // SPI_SS ON
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00DE  while(PINA.6==1); //Ждем 0 на MISO
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00DF  SPI_SEND(0xFF);  //Открытие буфера приема
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00E0 pktlen=SPI_SEND(0x00); //Считывание длинны пакета
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00E1 for (i=0;i<pktlen;i++)    //Считывание пакета
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00E2    {
; 0000 00E3    SPI_buffer[i]=SPI_SEND(0x00);
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00E4    }
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 00E5 PORTA.3=1; // SPI_SS OFF
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 00E6 STROB(SFRX);
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00E7 return pktlen; //Возврат длинны пакета
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 00E8  }
;PCODE: $00000145 VOL: 0
; //*******************************************************************************************
; void CLEAR_SPI_buffer(void) //Очистка SPI буфера
; 0000 00EB  { for (i=0;i<64;i++)
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 00EC    {
; 0000 00ED     SPI_buffer[i]=0x00;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 00EE    }
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 00EF  }
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; //********************************************************************************************
;  // Запись строки в SPI буффер
; unsigned char Write_SPI_buffer(flash char *str)
; 0000 00F3  {
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 00F4   i=0;
;	*str -> Y+0
;PCODE: $0000015C VOL: 0
; 0000 00F5   while(*str)
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 00F6   {
; 0000 00F7   SPI_buffer[i++]=*str++;
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 00F8 
; 0000 00F9   }
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 00FA  return i;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 00FB   }
;PCODE: $00000172 VOL: 0
;//*******************************************************************************************
;//===========================ПРЕРЫВАНИЯ======================================================
;// Timer 0 output compare A interrupt service routine
;interrupt [TIM0_COMPA] void timer0_compa_isr(void)    //Прерывание по совпадению таймера
; 0000 0100 {   #asm("sei")
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
	sei
;PCODE: $00000176 VOL: 0
; 0000 0101 USICR |= (1<<USITC); // Задание тактового импульса
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 0102 
; 0000 0103 }
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;//*******************************************************************************************
;// Pin change 0-7 interrupt service routine
;interrupt [PC_INT0] void pin_change_isr0(void)
; 0000 0107 { // PORTA.2=1; //Светодиод 1
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 0108    //PORTA.7=0; //Светодиод 2
; 0000 0109       GIMSK=0x00;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 010A       #asm("sei")
;PCODE: $00000180 VOL: 0
	sei
;PCODE: $00000181 VOL: 0
; 0000 010B      while(PINA.0==1);
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 010C       len=RECEIVE_PAKET();
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 010D 
; 0000 010E        if (strstr(SPI_buffer,"SECUR")!=NULL)
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 010F        { PORTA.2=1; //Светодиод 1
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 0110         PORTA.7=0;} //Светодиод 2
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 0111         if (strstr(SPI_buffer,"IDLE")!=NULL)
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 0112         {  PORTA.2=0; //Светодиод 1
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 0113            PORTA.7=1;} //Светодиод 2
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 0114          if (strstr(SPI_buffer,"CLEAR_OK")!=NULL)
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 0115             {for(i=0;i<5;i++)
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 0116               {PORTA.2=0; //Светодиод 1
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 0117                PORTA.7=1;  //Светодиод 2
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 0118                delay_ms(200);
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 0119                PORTA.2=1; //Светодиод 1
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 011A                PORTA.7=0;  //Светодиод 2
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 011B                delay_ms(200);
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 011C 
; 0000 011D 
; 0000 011E 
; 0000 011F               }
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 0120             }
; 0000 0121 
; 0000 0122          CLEAR_SPI_buffer();
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 0123          delay_ms(500);
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 0124 }
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0

	.DSEG
_0x61:
	.BYTE 0x14
;//********************************************************************************************
;// Pin change 8-11 interrupt service routine
;interrupt [PC_INT1] void pin_change_isr1(void)
; 0000 0128 {

	.CSEG
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 0129 GIMSK=0x00;
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 012A #asm("sei")
;PCODE: $000001D1 VOL: 0
	sei
;PCODE: $000001D2 VOL: 0
; 0000 012B RESET_TR();
;PCODE: $000001D3 VOL: 0
; 0000 012C delay_ms(10);
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 012D INIT_TR();
;PCODE: $000001D7 VOL: 0
; 0000 012E WRITE_PATABLE();
;PCODE: $000001D8 VOL: 0
; 0000 012F 
; 0000 0130 
; 0000 0131 
; 0000 0132 delay_ms(300);
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 0133 if((PINB.0==0)&&(PINB.1==0))
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 0134 { PORTA.2=1; //Светодиод 1
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 0135   PORTA.7=1; //Светодиод 2
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 0136   delay_ms(1000);
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 0137   if((PINB.0==0)&&(PINB.1==0))SEND_PAKET(Write_SPI_buffer("DATCHIK026026"));
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 0138 
; 0000 0139 
; 0000 013A  }
;PCODE: $00000201 VOL: 0
; 0000 013B  else{
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 013C if((PINB.0==0))  SEND_PAKET(Write_SPI_buffer("BRELOK250250-READ"));
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 013D if((PINB.1==0))  SEND_PAKET(Write_SPI_buffer("BRELOK250250-CHANGE")); }
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 013E  CLEAR_SPI_buffer();
;PCODE: $00000219 VOL: 0
; 0000 013F   GIFR|=0x10;
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 0140   GIMSK=0x10;
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0000 0141   STROB(SRX);
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 0142    delay_ms(1000);
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 0143    while ((PINB.0==0)||(PINB.1==0));
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 0144    GIFR|=0x30;
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0000 0145    GIMSK=0x20;
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 0146    PORTA.2=0; //Светодиод 1
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0000 0147   PORTA.7=0; //Светодиод 2
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0000 0148 }
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;
;//============================================================================================
;//+++++++++++++++++++ОСНОВНАЯ ФУНКЦИЯ ПРОГРАММЫ ++++++++++++++++++++++++++++++++++++++++++++++
;//=============================================================================================
;void main(void)
; 0000 014E {
;PCODE: $0000023E VOL: 0
; 0000 014F // Declare your local variables here
; 0000 0150 
; 0000 0151 // Crystal Oscillator division factor: 1
; 0000 0152 #pragma optsize-
; 0000 0153 CLKPR=0x80;
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0000 0154 CLKPR=0x00;
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0000 0155 #ifdef _OPTIMIZE_SIZE_
; 0000 0156 #pragma optsize+
; 0000 0157 #endif
; 0000 0158 
; 0000 0159 // Input/Output Ports initialization
; 0000 015A // Port A initialization
; 0000 015B // Func7=Out Func6=In Func5=Out Func4=Out Func3=Out Func2=Out Func1=In Func0=In
; 0000 015C // State7=0 State6=T State5=0 State4=0 State3=1 State2=0 State1=T State0=T
; 0000 015D PORTA=0x08;
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0000 015E DDRA=0xBC;
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0000 015F 
; 0000 0160 // Port B initialization
; 0000 0161 // Func3=In Func2=In Func1=In Func0=In
; 0000 0162 // State3=T State2=T State1=P State0=P
; 0000 0163 PORTB=0x03;
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0000 0164 DDRB=0x00;
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
; 0000 0165 
; 0000 0166 // Timer/Counter 0 initialization
; 0000 0167 // Clock source: System Clock
; 0000 0168 // Clock value: 8000,000 kHz
; 0000 0169 // Mode: Normal top=0xFF
; 0000 016A // OC0A output: Disconnected
; 0000 016B // OC0B output: Disconnected
; 0000 016C TCCR0A=0x00;
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0000 016D TCCR0B=0x01;
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 016E TCNT0=0x00;
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0000 016F OCR0A=0x1F;
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0000 0170 OCR0B=0x00;
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
; 0000 0171 
; 0000 0172 // Timer/Counter 1 initialization
; 0000 0173 // Clock source: System Clock
; 0000 0174 // Clock value: Timer1 Stopped
; 0000 0175 // Mode: Normal top=0xFFFF
; 0000 0176 // OC1A output: Discon.
; 0000 0177 // OC1B output: Discon.
; 0000 0178 // Noise Canceler: Off
; 0000 0179 // Input Capture on Falling Edge
; 0000 017A // Timer1 Overflow Interrupt: Off
; 0000 017B // Input Capture Interrupt: Off
; 0000 017C // Compare A Match Interrupt: Off
; 0000 017D // Compare B Match Interrupt: Off
; 0000 017E TCCR1A=0x00;
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0000 017F TCCR1B=0x00;
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
; 0000 0180 TCNT1H=0x00;
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0000 0181 TCNT1L=0x00;
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0000 0182 ICR1H=0x00;
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0000 0183 ICR1L=0x00;
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
; 0000 0184 OCR1AH=0x00;
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 0000 0185 OCR1AL=0x00;
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
; 0000 0186 OCR1BH=0x00;
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0000 0187 OCR1BL=0x00;
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0000 0188 
; 0000 0189 // External Interrupt(s) initialization
; 0000 018A // INT0: Off
; 0000 018B // Interrupt on any change on pins PCINT0-7: On
; 0000 018C // Interrupt on any change on pins PCINT8-11: On
; 0000 018D MCUCR=0x00;
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0000 018E PCMSK0=0x01;
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
; 0000 018F PCMSK1=0x03;
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0000 0190 GIMSK=0x20;
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
; 0000 0191 GIFR=0x30;
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
; 0000 0192 // Timer/Counter 0 Interrupt(s) initialization
; 0000 0193 TIMSK0=0x02;
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
; 0000 0194 
; 0000 0195 // Timer/Counter 1 Interrupt(s) initialization
; 0000 0196 TIMSK1=0x00;
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0000 0197 
; 0000 0198 // Universal Serial Interface initialization
; 0000 0199 // Mode: Three Wire (SPI)
; 0000 019A // Clock source: Reg.=ext. pos. edge, Cnt.=USITC
; 0000 019B // USI Counter Overflow Interrupt: Off
; 0000 019C USICR=0x1A;
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
; 0000 019D 
; 0000 019E // Analog Comparator initialization
; 0000 019F // Analog Comparator: Off
; 0000 01A0 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 01A1 ACSR=0x80;
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
; 0000 01A2 ADCSRB=0x00;
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
; 0000 01A3 DIDR0=0x00;
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
; 0000 01A4 
; 0000 01A5 // ADC initialization
; 0000 01A6 // ADC disabled
; 0000 01A7 ADCSRA=0x00;
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
; 0000 01A8 
; 0000 01A9 // Global enable interrupts
; 0000 01AA #asm("sei")
;PCODE: $00000281 VOL: 0
	sei
;PCODE: $00000282 VOL: 0
; 0000 01AB  PORTA.2=1; //Светодиод 1
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
; 0000 01AC  PORTA.7=0; //Светодиод 2
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
; 0000 01AD       delay_ms(1000);
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0000 01AE 
; 0000 01AF       RESET_TR();
;PCODE: $0000028A VOL: 0
; 0000 01B0       delay_ms(10);
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0000 01B1       INIT_TR();
;PCODE: $0000028E VOL: 0
; 0000 01B2       WRITE_PATABLE();
;PCODE: $0000028F VOL: 0
; 0000 01B3 
; 0000 01B4 while (1)
;PCODE: $00000290 VOL: 0
; 0000 01B5 
; 0000 01B6       {  PORTA.2=0; //Светодиод 1
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
; 0000 01B7          PORTA.7=0; //Светодиод 2
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
; 0000 01B8         STROB(SPWD);
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 01B9         delay_ms(10);
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0000 01BA         MCUCR|=0x30 ; //Разрешение перехода в спящий режим
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0000 01BB         #asm("SLEEP")
;PCODE: $0000029E VOL: 0
	SLEEP
;PCODE: $0000029F VOL: 0
; 0000 01BC         delay_ms(500);
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
; 0000 01BD       }
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
; 0000 01BE }
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
