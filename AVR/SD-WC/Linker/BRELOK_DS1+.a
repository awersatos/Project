;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : BRELOK_DS1+
;Version : 1
;Date    : 06.05.2012
;Author  : Alexandr Gordejchik
;Company : NTS
;Comments:
;
;
;Chip type               : ATtiny44
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 64
;*****************************************************/
;
;#include <tiny44.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x18
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x18
;PCODE: $00000007 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000008 VOL: 0
	#endif
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
;#include <delay.h>
;#include <string.h>
;#include <stdlib.h>
;
;//++++++++++++ Определение строб-комманд трансивера+++++++++++++++++++++++++++++++++++++++++++++++++++++
;#define SRES 0x30 //Сброс трансивера
;#define SIDLE 0x36 //Переход в режим IDLE
;#define SCAL 0x33   // Калибровка частотного синтезатора
;#define SRX 0x34   // Переход в режим RX
;#define STX 0x35   // Переход в режим TX
;#define SFRX 0x3A  // Очистка RX FIFO
;#define SFTX 0x3B  // Очистка TX FIFO
;#define SNOP 0x3D  // Пустая строб-команда
;//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; // Массив инициализации регистров (старший байт - адрес, младший - значение)
;flash unsigned int init[39]={0x0B08,     //0 FSCTRL1  Параметры синтезатора частоты
;                             0x0C00,     //1 FSCTRL0
;                             0x0D58,     //2 FREQ2 Определение базовой несущей частоты
;                             0x0EE9,     //3 FREQ1
;                             0x0F00,     //4 FREQ0
;                             0x10E4,     //5 MDMCFG4 ПАРАМЕТРЫ МОДЕМА ширина полосы пропускания
;                             0x11F1,     //6 MDMCFG3 скорость передачи
;                             0x1201,     //7 MDMCFG2 вид модуляции параметры слова синхронизации
;                             0x1302,     //8 MDMCFG1 длинна приамбулы включение FEC
;                             0x14E5,     //9 MDMCFG0 величина разноса каналлов
;                             0x0A00,     //10 CHANNR номер канала
;                             0x1504,     //11 DEVIATN девиация
;                             0x2156,     //12 FREND1
;                             0x2210,     //13 FREND0
;                             0x1607,     //14 MCSM2   ПАРАМЕТРЫ КОНТРОЛЯ РАДИО
;                             0x1730,     //15 MCSM1
;                             0x1818,     //16 MCSM0
;                             0x1916,     //17 FOCCFG компенсация сдвига частоты
;                             0x1A6C,     //18 BSCFG кофигурация побитовой синхронизации
;                             0x1BFB,     //19 AGCCTRL2 Параметры МШУ и порог чувствительности при приеме
;                             0x1C40,     //20 AGCCTRL1
;                             0x1D91,     //21 AGCCTRL0
;                             0x23A9,     //22 FSCAL3  Параметры калибровки синтезатора
;                             0x240A,     //23 FSCAL2
;                             0x2500,     //24 FSCAL1
;                             0x2611,     //25 FSCAL0
;                             0x2959,     //26 FSTEST
;                             0x2C88,     //27 TEST2
;                             0x2D31,     //28 TEST1
;                             0x2E0B,     //29 TEST0
;                             0x0006,     //30 IOCFG2 Конфигурация GDO2 - 1при приеме синхрослова 0 пакет принят
;                             0x020E,     //31 IOCFG0 Конфигурация GDO0 - обнаружение несущей
;                             0x0740,     //32 PKTCTRL1 Конфигурация пакета
;                             0x0805,     //33 PKTCTRL0
;                             0x0900,     //34 ADDR Адрес устройства
;                             0x06FF,     //35 PKTLEN Длинна пакета
;                             0x0307,      //36 FIFOTHR граница переполнения FIFO
;                             0x04CF,      //37
;                             0x05FC,       //38
;                             } ;
;//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;union U      // Определение объединения
;		{
;			unsigned int buf;
;			unsigned char b[2];
;		};
;
;union U data;
;
;// Определение глобальных переменных
;unsigned char i;   //Основной счетчик
;eeprom unsigned char STATUS[37];
;//*******************************************************************************************
;void LightDiode(unsigned char n) // Функция управления светодиодом
; 0000 005D {

	.CSEG
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
; 0000 005E  switch (n)
;	n -> Y+0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 005F  {
; 0000 0060  case 0:
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0061 			{
; 0000 0062 			PORTB.0=0;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0063             PORTB.1=0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0064 				break;
;PCODE: $00000015 VOL: 0
; 0000 0065 			}
; 0000 0066  case 1:
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0067 			{
; 0000 0068 			PORTB.0=1;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0069             PORTB.1=0;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 006A 				break;
;PCODE: $0000001D VOL: 0
; 0000 006B 			}
; 0000 006C  case 2:
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 006D 			{
; 0000 006E 			PORTB.0=0;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 006F             PORTB.1=1;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0070 				break;
;PCODE: $00000025 VOL: 0
; 0000 0071  case 3:
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0072 			{
; 0000 0073 			PORTB.0=1;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0074            PORTB.1=1;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0075 				break;
;PCODE: $0000002D VOL: 0
; 0000 0076 			} 			}
; 0000 0077  }
;PCODE: $0000002E VOL: 0
; 0000 0078 
; 0000 0079 }
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;//*******************************************************************************************
;//*******************ФУНКЦИИ ДЛЯ РАБОТЫ С ТРАНСИВЕРОМ*****************************************
;//============================================================================================
;// Функция передачи символа по SPI
;unsigned char SPI_SEND(unsigned char data)
; 0000 007F {
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0080  USIDR=data;      // Загрузка данных в сдвиговый регистр
;	data -> Y+0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0081  USISR=(1<<USIOIF);  // Очистка флага переполнения и 4-битного счетчика
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0082  TIFR0 |= (1<<OCF0A);   // Очистка флага прерывания по совпадению таймера
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0083  TIMSK0 |= (1<<OCIE0A); // Разрешение прерывания по совпадению
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0084  while(USISR.USIOIF==0); //Ожидание конца передачи байта
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0085  TIMSK0=0x00;     //Запрет прерывания
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0086  return USIDR; // Возврат данных
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0087  }
;PCODE: $00000049 VOL: 0
;//*******************************************************************************************
; void RESET_TR(void) //Сброс трансивера по включению питания
; 0000 008A {
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 008B USICR=0x00; //Отключение SPI
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 008C PORTA.4=1; //Устанавливаем 1 на SCK
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 008D PORTA.5=0;  // Устанавливаем 0 на MOSI
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 008E PORTA.7=0; // SPI_SS ON
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 008F delay_us(1);
;PCODE: $00000054 VOL: 0
; 0000 0090 PORTA.7=1; // SPI_SS OFF
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0091 delay_us(40);
;PCODE: $00000057 VOL: 0
; 0000 0092 USICR=0x1A; //Включение SPI
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0093 PORTA.7=0; // SPI_SS ON
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0094 while(PORTA.6==1); //Ждем 0 на MISO
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0095 SPI_SEND(SRES);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0096 PORTA.7=1; // SPI_SS OFF
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0097 }
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;//*******************************************************************************************
;void WRITE_REG( unsigned int reg) // Функция записи регистра
; 0000 009A {
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 009B  union U dat;
; 0000 009C  dat.buf=reg;
;PCODE: $0000006B VOL: 0
;	reg -> Y+2
;	dat -> Y+0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 009D  SPI_SEND(dat.b[1]);  //Адрес регистра
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 009E  SPI_SEND(dat.b[0]);  //Значение регистра
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 009F }
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;//********************************************************************************************
;unsigned char READ_REG(unsigned char adr)  // Функция чтения регистра
; 0000 00A2 {  unsigned char reg;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00A3    SPI_SEND(adr | 0x80);   // Старший бит определяет операцию
;PCODE: $00000079 VOL: 0
;	adr -> Y+1
;	reg -> R17
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00A4    reg= SPI_SEND(0xFF);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00A5    return reg;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00A6 }
;PCODE: $00000087 VOL: 0
;//**********************************************************************************************
; void INIT_TR(void) //Функция инициализации трансивера
; 0000 00A9  { union U dt;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00AA    unsigned char err;
; 0000 00AB   PORTA.7=0; // SPI_SS ON
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;	dt -> Y+1
;	err -> R17
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00AC while(PORTA.6==1); //Ждем 0 на MISO
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00AD   do{
;PCODE: $00000094 VOL: 0
; 0000 00AE   for (i=0;i<39;i++)
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00AF    {
; 0000 00B0     WRITE_REG(init[i]);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00B1     };
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00B2     err=0;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00B3 
; 0000 00B4     for (i=0;i<39;i++)
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00B5      {
; 0000 00B6      dt.buf=init[i];
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00B7      if(dt.b[0]!=READ_REG(dt.b[1])){ err=1; }
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00B8      }
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00B9 
; 0000 00BA     }while(err==1);
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00BB 
; 0000 00BC   PORTA.7=1; // SPI_SS OFF
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00BD  }
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;//********************************************************************************************
;void WRITE_PATABLE(void)    //Запись таблицы мощности
; 0000 00C0 {
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00C1 PORTA.7=0; // SPI_SS ON
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00C2 while(PORTA.6==1); //Ждем 0 на MISO
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00C3 WRITE_REG(0x3EFF);         //Запись значения выходной мощности передатчика +1dbm
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00C4 //SPI_SEND(0x7E);
; 0000 00C5 //SPI_SEND(0x00);
; 0000 00C6 //SPI_SEND(0xFF);
; 0000 00C7 PORTA.7=1; // SPI_SS OFF
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00C8 }
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;//*********************************************************************************************
;
;
;//*********************************************************************************************
;//===========================ПРЕРЫВАНИЯ======================================================
;// Timer 0 output compare A interrupt service routine
;interrupt [TIM0_COMPA] void timer0_compa_isr(void)    //Прерывание по совпадению таймера
; 0000 00D0 {
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00D1 USICR |= (1<<USITC); // Задание тактового импульса
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00D2 
; 0000 00D3 }
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;
;//============================================================================================
;//+++++++++++++++++++ОСНОВНАЯ ФУНКЦИЯ ПРОГРАММЫ ++++++++++++++++++++++++++++++++++++++++++++++
;//=============================================================================================
;
;void main(void)
; 0000 00DA {
;PCODE: $000000EA VOL: 0
; 0000 00DB // Declare your local variables here
; 0000 00DC 
; 0000 00DD // Crystal Oscillator division factor: 1
; 0000 00DE #pragma optsize-
; 0000 00DF CLKPR=0x80;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00E0 CLKPR=0x00;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00E1 #ifdef _OPTIMIZE_SIZE_
; 0000 00E2 #pragma optsize+
; 0000 00E3 #endif
; 0000 00E4 
; 0000 00E5 // Input/Output Ports initialization
; 0000 00E6 // Port A initialization
; 0000 00E7 // Func7=Out Func6=In Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 00E8 // State7=1 State6=T State5=0 State4=0 State3=T State2=T State1=P State0=P
; 0000 00E9 PORTA=0x83;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00EA DDRA=0xB0;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00EB 
; 0000 00EC // Port B initialization
; 0000 00ED // Func3=In Func2=In Func1=Out Func0=Out
; 0000 00EE // State3=T State2=T State1=0 State0=0
; 0000 00EF PORTB=0x00;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00F0 DDRB=0x03;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00F1 
; 0000 00F2 // Timer/Counter 0 initialization
; 0000 00F3 // Clock source: System Clock
; 0000 00F4 // Clock value: 8000,000 kHz
; 0000 00F5 // Mode: Normal top=0xFF
; 0000 00F6 // OC0A output: Disconnected
; 0000 00F7 // OC0B output: Disconnected
; 0000 00F8 TCCR0A=0x00;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00F9 TCCR0B=0x01;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00FA TCNT0=0x00;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00FB OCR0A=0x1F;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00FC OCR0B=0x00;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00FD 
; 0000 00FE // Timer/Counter 1 initialization
; 0000 00FF // Clock source: System Clock
; 0000 0100 // Clock value: Timer1 Stopped
; 0000 0101 // Mode: Normal top=0xFFFF
; 0000 0102 // OC1A output: Discon.
; 0000 0103 // OC1B output: Discon.
; 0000 0104 // Noise Canceler: Off
; 0000 0105 // Input Capture on Falling Edge
; 0000 0106 // Timer1 Overflow Interrupt: Off
; 0000 0107 // Input Capture Interrupt: Off
; 0000 0108 // Compare A Match Interrupt: Off
; 0000 0109 // Compare B Match Interrupt: Off
; 0000 010A TCCR1A=0x00;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 010B TCCR1B=0x00;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 010C TCNT1H=0x00;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 010D TCNT1L=0x00;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 010E ICR1H=0x00;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 010F ICR1L=0x00;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 0110 OCR1AH=0x00;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 0111 OCR1AL=0x00;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 0112 OCR1BH=0x00;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 0113 OCR1BL=0x00;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 0114 
; 0000 0115 // External Interrupt(s) initialization
; 0000 0116 // INT0: Off
; 0000 0117 // Interrupt on any change on pins PCINT0-7: Off
; 0000 0118 // Interrupt on any change on pins PCINT8-11: Off
; 0000 0119 MCUCR=0x00;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 011A GIMSK=0x00;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 011B 
; 0000 011C // Timer/Counter 0 Interrupt(s) initialization
; 0000 011D TIMSK0=0x00;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 011E 
; 0000 011F // Timer/Counter 1 Interrupt(s) initialization
; 0000 0120 TIMSK1=0x00;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 0121 
; 0000 0122 // Universal Serial Interface initialization
; 0000 0123 // Mode: Three Wire (SPI)
; 0000 0124 // Clock source: Reg.=ext. pos. edge, Cnt.=USITC
; 0000 0125 // USI Counter Overflow Interrupt: Off
; 0000 0126 USICR=0x00;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 0127 
; 0000 0128 // Analog Comparator initialization
; 0000 0129 // Analog Comparator: Off
; 0000 012A // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 012B ACSR=0x80;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 012C ADCSRB=0x00;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 012D DIDR0=0x00;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 012E 
; 0000 012F // ADC initialization
; 0000 0130 // ADC disabled
; 0000 0131 ADCSRA=0x00;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 0132 
; 0000 0133 // Global enable interrupts
; 0000 0134 #asm("sei")
;PCODE: $00000127 VOL: 0
	sei
;PCODE: $00000128 VOL: 0
; 0000 0135 
; 0000 0136 while (1)
;PCODE: $00000129 VOL: 0
; 0000 0137       {LightDiode(1);
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 0138       delay_ms(500);
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 0139       RESET_TR();
;PCODE: $00000130 VOL: 0
; 0000 013A       delay_ms(10);
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 013B       INIT_TR();
;PCODE: $00000134 VOL: 0
; 0000 013C       WRITE_PATABLE();
;PCODE: $00000135 VOL: 0
; 0000 013D m:
;PCODE: $00000136 VOL: 0
; 0000 013E       LightDiode(0);
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 013F        PORTA.7=0; // SPI_SS ON
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 0140       while(PORTA.6==1); //Ждем 0 на MISO
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 0141       SPI_SEND(SIDLE); //Переход в режим IDLE
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 0142       SPI_SEND(SFRX); //Сброс буфера приема
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 0143       SPI_SEND(SFTX); //Сброс буфера передачи
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 0144      // SPI_SEND(SRX);
; 0000 0145 
; 0000 0146 
; 0000 0147       SPI_SEND(0x7F);
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 0148       SPI_SEND(0x08);
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 0149       SPI_SEND('S');
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 014A       SPI_SEND('E');
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 014B       SPI_SEND('X');
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 014C       SPI_SEND('O');
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 014D       SPI_SEND('N');
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 014E       SPI_SEND('I');
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 014F       SPI_SEND('X');
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 0150 
; 0000 0151       PORTA.7=1; // SPI_SS OFF
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 0152       // LightDiode(0);
; 0000 0153       delay_ms(1);
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 0154 
; 0000 0155 
; 0000 0156       PORTA.7=0; // SPI_SS ON
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 0157       while(PORTA.6==1); //Ждем 0 на MISO
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 0158               /*
; 0000 0159        SPI_SEND(0xFA);
; 0000 015A       STATUS[0]=SPI_SEND(0xFF);
; 0000 015B       STATUS[1]=SPI_SEND(SNOP);
; 0000 015C               */
; 0000 015D       SPI_SEND(STX);
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 015E       delay_ms(200);
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 015F                      /*
; 0000 0160       STATUS[2]=SPI_SEND(SNOP);
; 0000 0161       delay_ms(100);
; 0000 0162       STATUS[3]=SPI_SEND(SNOP);
; 0000 0163                   */
; 0000 0164      // PORTA.7=1; // SPI_SS OFF
; 0000 0165 
; 0000 0166      //while(PORTA.3==0);
; 0000 0167      LightDiode(2);
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 0168      PORTA.7=1; // SPI_SS OFF
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 0169      // while(PORTA.3==1);
; 0000 016A        //LightDiode(0);
; 0000 016B           /*
; 0000 016C      for (i=0;i<37;i++)
; 0000 016D        {
; 0000 016E        data.buf=init[i];
; 0000 016F         STATUS[i]=READ_REG(data.b[1]);}
; 0000 0170                 */
; 0000 0171                 /*
; 0000 0172       PORTA.7=1; // SPI_SS OFF
; 0000 0173          delay_ms(300);
; 0000 0174       LightDiode(2);
; 0000 0175               */
; 0000 0176               while(1);
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 0177               delay_ms(1000);
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 0178               goto m;
;PCODE: $00000184 VOL: 0
; 0000 0179       while(1);
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 017A       }
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 017B }
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
