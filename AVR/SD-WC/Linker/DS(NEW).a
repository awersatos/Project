;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : DS(NEW)
;Version :
;Date    : 01.01.2002
;Author  : Alexandr Gordejchik
;Company : NTS
;Comments:
;
;
;Chip type               : ATmega8L
;Program type            : Application
;AVR Core Clock frequency: 3,686400 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <string.h>
;#include <stdlib.h>
;#include <stdio.h>
;#include <spi.h>
;
;#define CR 0xD     // Определение служебных символов
;#define LF 0xA
;#define ctrl_Z 0x1A
;
;//++++++++++++ Определение строб-комманд трансивера+++++++++++++++++++++++++++++++++++++++++++++++++++++
;#define SRES 0x30 //Сброс трансивера
;#define SIDLE 0x36 //Переход в режим IDLE
;#define SCAL 0x33   // Калибровка частотного синтезатора
;#define SRX 0x34   // Переход в режим RX
;#define STX 0x35   // Переход в режим TX
;#define SFRX 0x3A  // Очистка RX FIFO
;#define SFTX 0x3B  // Очистка TX FIFO
;#define SNOP 0x3D  // Пустая строб-команда
;//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; // Массив инициализации регистров (старший байт - адрес, младший - значение)
;flash unsigned int init[35]=
;{
; 0x0006, //0 IOGFG2 Обнаружение несущей
; 0x0206, //1 IOGFG0 Прием-передача пакета
; 0x06FF, //2 PKTLEN Длинна пакета
; 0x0704, //3 PKRCTRL1 Контроль пакета
; 0x0805, //4 PKRCTRL0 Контроль пакета
; 0x0901, //5 ADDR Адрес устройства
; 0x0A2F, //6 CHANNR Номер канала
; 0x0B06, //7 FSCTRL1 Параметры контроля синтезатора частоты
; 0x0C00, //8 FSCTRL0 Параметры контроля синтезатора частоты
; 0x0D10, //9 FREQ2 Параметы опорной частоты
; 0x0E09, //10 FREQ1 Параметы опорной частоты
; 0x0F7B, //11 FREQ0 Параметы опорной частоты
; 0x1085, //12 MDMCFG4 Конфигурация модема
; 0x1178, //13 MDMCFG3 Конфигурация модема
; 0x1203, //14 MDMCFG2 Конфигурация модема
; 0x1302, //15 MDMCFG1 Конфигурация модема
; 0x14E5, //16 MDMCFG0 Конфигурация модема
; 0x1514, //17 DEVIATION Девиация
; 0x1730, //18 MCSM1 Конфигурация автомата контроля радио
; 0x1818, //19 MCSM0 Конфигурация автомата контроля радио
; 0x1916, //20 FOCCFG Компенсация сдвига частоты
; 0x1A6C, //21 BSCFG Конфигурация побитовой синхронизации
; 0x1BC0, //22 AGCCTRL2 Пармаметры приемного тракта
; 0x1C00, //23 AGCCTRL1 Пармаметры приемного тракта
; 0x1DB2, //24 AGCCTRL0 Пармаметры приемного тракта
; 0x21B6, //25 FREND1 Параметры приемного тракта
; 0x2210, //26 FREND0 Параметры передающего тракта
; 0x23E9, //27 FSCAL3 Параметры калибровки синтезатора частоты
; 0x242A, //28 FSCAL2 Параметры калибровки синтезатора частоты
; 0x2500, //29 FSCAL1 Параметры калибровки синтезатора частоты
; 0x261F, //30 FSCAL0 Параметры калибровки синтезатора частоты
; 0x2959, //31 FSTEST Проверка синтезаторы частоты
; 0x2C81, //32 TEST2
; 0x2D35, //33 TEST1
; 0x2E09  //34 TEST0
;};
;//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
;union U      // Определение объединения
;		{
;			unsigned int buf;
;			unsigned char b[2];
;		};
;
;
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 512
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;
;#else
;unsigned int rx_wr_index;
;#endif
; char NR[12];     // Массив телефонного номер
;// This flag is set on USART Receiver buffer overflow
;//bit rx_buffer_overflow;
;
;     // Определение глобальных переменных
;char z;          //Переменная статуса охраны
;
;unsigned int i; //Счетчик
;
;unsigned char SPI_buffer[64];
;unsigned char *x;
;
;eeprom unsigned char OP;
;
;
;eeprom unsigned char COUNT;
;eeprom unsigned char STAT[256];
;//*******************************************************************************************
;//+++++++++++++++ФУНКЦИИ+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;//********************************************************************************************
;void LightDiode(unsigned char n) // Функция управления светодиодом
; 0000 009E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 009F  switch (n)
;	n -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 00A0  {
; 0000 00A1  case 'T':
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 00A2 			{
; 0000 00A3 			PORTC.4=0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 00A4             PORTC.5=0;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 00A5 				break;
;PCODE: $00000017 VOL: 0
; 0000 00A6 			}
; 0000 00A7  case 'R':
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 00A8 			{
; 0000 00A9 			PORTC.4=1;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 00AA             PORTC.5=0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 00AB 				break;
;PCODE: $0000001F VOL: 0
; 0000 00AC 			}
; 0000 00AD  case 'G':
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 00AE 			{
; 0000 00AF 			PORTC.4=0;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 00B0             PORTC.5=1;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 00B1 				break;
;PCODE: $00000027 VOL: 0
; 0000 00B2            }
; 0000 00B3  case 'O':
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 00B4 			{
; 0000 00B5 			PORTC.4=1;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 00B6             PORTC.5=1;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 00B7 				break;
;PCODE: $0000002F VOL: 0
; 0000 00B8 			}
; 0000 00B9  }
;PCODE: $00000030 VOL: 0
; 0000 00BA 
; 0000 00BB }
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;//==================ФУНКЦИИ ДЛЯ РАБОТЫ С МОДЕМОМ============================================
;//******************************************************************************************
;void UART_Transmit(char data) // Функция передачи символа через UART
; 0000 00BF {
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 00C0 while (!(UCSRA & (1<<UDRE))) {};
;	data -> Y+0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 00C1 UDR=data;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 00C2 }
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;
;
;//**********************************************************************************************************
;       void SEND_Str(flash char *str) {        // Функция передачи строки  из флеш памяти
; 0000 00C6 void SEND_Str(flash char *str) {
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 00C7         while(*str) {
;	*str -> Y+0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 00C8        UART_Transmit(*str++);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 00C9 
; 0000 00CA     };
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 00CB     delay_ms(20);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 00CC }
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;//**********************************************************************************************************
;void CLEAR_BUF(void)   // Функция очистки буффера приема
; 0000 00CF {
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 00D0 
; 0000 00D1 for (i=0;i<RX_BUFFER_SIZE;i++) {
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 00D2       rx_buffer[i]=0;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 00D3     };
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 00D4    rx_wr_index=0;
;PCODE: $0000006C VOL: 0
; 0000 00D5   // #asm("wdr")
; 0000 00D6 
; 0000 00D7 }
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;//**********************************************************************************************************
;  char TEST_OK(void)     // Функция проверки ответа ОК на команду
; 0000 00DA   {
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 00DB   char c;
; 0000 00DC   char *d;
; 0000 00DD   char OK[]="OK";
; 0000 00DE   d=strstr(rx_buffer, OK);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;	c -> R17
;	*d -> R18,R19
;	OK -> Y+4
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00DF   c=*d;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00E0  // #asm("wdr")
; 0000 00E1  CLEAR_BUF();
;PCODE: $00000081 VOL: 0
; 0000 00E2    return c;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00E3 
; 0000 00E4   }
;PCODE: $00000086 VOL: 0
;
;//**********************************************************************************************************
;  char REG_NET(void)   // Функция проверки регистрации в сети
; 0000 00E8   {
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00E9   char c;
; 0000 00EA   char *d;
; 0000 00EB   char REG[]="+CREG:";
; 0000 00EC   d=strstr(rx_buffer, REG);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;	c -> R17
;	*d -> R18,R19
;	REG -> Y+4
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00ED   d=d+9;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00EE   c=*d;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00EF  // #asm("wdr")
; 0000 00F0   CLEAR_BUF();
;PCODE: $000000A3 VOL: 0
; 0000 00F1   return c;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00F2   }
;PCODE: $000000A8 VOL: 0
;//********************************************************************************************
;void RESET_MODEM(void)    // Сброс модема
; 0000 00F5  {//LightDiode('O');
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00F6   do {
;PCODE: $000000AB VOL: 0
; 0000 00F7 
; 0000 00F8   if (PINC.1==0)
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00F9   {
; 0000 00FA   PORTC.0=0;       // Включение модема
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00FB   delay_ms(1000);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00FC   PORTC.0=1;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00FD   delay_ms(250);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00FE    }
; 0000 00FF 
; 0000 0100    else
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0101    {
; 0000 0102     PORTC.2=0;       // Сброс модема
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0103   delay_ms(100);
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 0104   PORTC.2=1;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0105   delay_ms(1000);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0106    }
;PCODE: $000000C5 VOL: 0
; 0000 0107 
; 0000 0108     } while(PINC.1==0);   // Проверка включения модема
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0109 
; 0000 010A 
; 0000 010B     do{      SEND_Str("AT\r");  // Проверка ответа модема
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 010C         // #asm("wdr")
; 0000 010D       } while(TEST_OK()==NULL)  ;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 010E 
; 0000 010F  do{   SEND_Str("AT+CREG?\r");   // Проверка регистрации в сети
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 0110        // #asm("wdr")
; 0000 0111       delay_ms(1000);
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0112      // #asm("wdr")
; 0000 0113       }while (REG_NET()!='1') ;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0114 
; 0000 0115 
; 0000 0116 
; 0000 0117  }
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;
;
;//**********************************************************************************************************
;char SET_NR(void) // Функция считывания телефонного номера с SIM карты
; 0000 011C {
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 011D char c;
; 0000 011E char *d;
; 0000 011F 
; 0000 0120 d=strstr(rx_buffer, ",\"+7");
;PCODE: $000000E9 VOL: 0
;	c -> R17
;	*d -> R18,R19
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0121 if (d==NULL){c=0;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0122           return c;}
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0123   d=d+4;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 0124   i=0;
;PCODE: $000000FC VOL: 0
; 0000 0125   while(i<12)
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 0126   {
; 0000 0127   NR[i++]=*d;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0128    d=d-1;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 0129    NR[i++]=*d;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 012A    d=d+3;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 012B   }
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 012C   NR[10]='F';
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 012D 
; 0000 012E   CLEAR_BUF();
;PCODE: $0000011E VOL: 0
; 0000 012F   c=1;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 0130   return c;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 0131 }
;PCODE: $00000125 VOL: 0

	.DSEG
_0x36:
	.BYTE 0x5
;
;//**********************************************************************************************************
;// Функция проверки балланса
; void BALLANSE(void)
; 0000 0136  {   unsigned char S;

	.CSEG
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 0137    // char XY[2];
; 0000 0138     unsigned char *s1, *s2;
; 0000 0139     delay_ms(4000);
;PCODE: $00000128 VOL: 0
;	S -> R17
;	*s1 -> R18,R19
;	*s2 -> R20,R21
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 013A     CLEAR_BUF();
;PCODE: $0000012C VOL: 0
; 0000 013B   do
;PCODE: $0000012D VOL: 0
; 0000 013C    { if(OP==0) SEND_Str("AT+CUSD=1,\"*100#\"\r"); //Отправа запроса балланса
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 013D      else SEND_Str("AT+CUSD=1,\"*102#\"\r");
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 013E    delay_ms(500);
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 013F    #asm("wdr")
;PCODE: $00000140 VOL: 0
	wdr
;PCODE: $00000141 VOL: 0
; 0000 0140     }while(TEST_OK()==0);
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 0141     for(i=0;i<5;i++)
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 0142     {
; 0000 0143      if(strstr(rx_buffer, "+CUSD:")!=NULL) break;   //Ожидание ответа на запрос
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 0144      #asm("wdr")
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
	wdr
;PCODE: $0000015C VOL: 0
; 0000 0145      delay_ms(1000);
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 0146      #asm("wdr")
;PCODE: $00000160 VOL: 0
	wdr
;PCODE: $00000161 VOL: 0
; 0000 0147     }
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 0148     s1=strstr(rx_buffer, "04110430043B0430043D0441");
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 0149     if(s1!=NULL)
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 014A     {
; 0000 014B     s2=strstr(rx_buffer, "0440");
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 014C     S=((s2-s1+4)/2)+13;
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 014D    // sprintf(XY, "%02d", S);
; 0000 014E    // XX[0]=XY[0];
; 0000 014F    // XX[1]=XY[1];
; 0000 0150 
; 0000 0151     printf("AT+CMGS=%02d\r",S) ;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 0152     delay_ms(100);
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 0153     #asm("wdr")
;PCODE: $0000018B VOL: 0
	wdr
;PCODE: $0000018C VOL: 0
; 0000 0154      SEND_Str("0001000B91");     // Ввод настроек PDU
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 0155 
; 0000 0156       for(i=0;i<12;i++)            // Ввод номера
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 0157       {UART_Transmit(NR[i]);}
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 0158       S=S-13;
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 0159       printf("0008%02X", S);
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 015A       s2=s2+4;
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 015B       do{
;PCODE: $000001B5 VOL: 0
; 0000 015C        UART_Transmit(*s1);
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 015D        s1++;
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 015E       }while(s1!=s2);
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 015F       UART_Transmit(0x1A);
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 0160              /*
; 0000 0161       delay_ms(1000);
; 0000 0162   for (i=0; i<256; i++)    // Запись буфера приема в eeprom
; 0000 0163       {eebuffer[i]=rx_buffer[i];}
; 0000 0164              */
; 0000 0165       }
; 0000 0166       CLEAR_BUF();
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 0167  }
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0

	.DSEG
_0x44:
	.BYTE 0x25
; //*********************************************************************************************
; char CALL(unsigned char nom)
; 0000 016A  { unsigned char NOM[12];

	.CSEG
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 016B    char *d1;
; 0000 016C    char s;
; 0000 016D switch (nom)
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;	nom -> Y+16
;	NOM -> Y+4
;	*d1 -> R16,R17
;	s -> R19
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 016E     {
; 0000 016F      case 1:
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 0170 			{
; 0000 0171 			    SEND_Str("AT+CPBF=\"N1\"\r");
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 0172 				break;
;PCODE: $000001D7 VOL: 0
; 0000 0173 			}
; 0000 0174 
; 0000 0175      case 2:
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 0176 			{
; 0000 0177 			    SEND_Str("AT+CPBF=\"N2\"\r");
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 0178 				break;
;PCODE: $000001DF VOL: 0
; 0000 0179 			}
; 0000 017A 
; 0000 017B      case 3:
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 017C 			{
; 0000 017D 			    SEND_Str("AT+CPBF=\"N3\"\r");
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 017E 				break;
;PCODE: $000001E7 VOL: 0
; 0000 017F 			}
; 0000 0180 
; 0000 0181      case 4:
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 0182 			{
; 0000 0183 			    SEND_Str("AT+CPBF=\"N4\"\r");
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 0184 				break;
;PCODE: $000001EF VOL: 0
; 0000 0185 			}
; 0000 0186 
; 0000 0187      case 5:
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 0188 			{
; 0000 0189 			    SEND_Str("AT+CPBF=\"N5\"\r");
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 018A 				break;
;PCODE: $000001F7 VOL: 0
; 0000 018B 			}
; 0000 018C 
; 0000 018D      case 6:
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 018E 			{
; 0000 018F 			    SEND_Str("AT+CPBF=\"N6\"\r");
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 0190 				break;
;PCODE: $000001FF VOL: 0
; 0000 0191 			}
; 0000 0192 
; 0000 0193 
; 0000 0194     }
;PCODE: $00000200 VOL: 0
; 0000 0195     delay_ms(100);
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 0196     d1=strstr(rx_buffer, ",\"+7");
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 0197     if(d1!=NULL)
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 0198     {
; 0000 0199      d1=d1+2;
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 019A      for(i=0;i<12;i++)
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 019B       { NOM[i]=*d1;
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 019C        d1=d1+1;
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 019D       }
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 019E     }
; 0000 019F 
; 0000 01A0     else {s=0;
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 01A1      return s; }
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0000 01A2     CLEAR_BUF();
;PCODE: $00000231 VOL: 0
; 0000 01A3    SEND_Str("AT+CSTA=145\r");
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 01A4    delay_ms(100);
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0000 01A5    SEND_Str("AT*PSSTKI=1\r");
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0000 01A6    delay_ms(100);
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 01A7    SEND_Str("ATD\"");
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 01A8    for(i=0;i<12;i++) UART_Transmit(NOM[i]);
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
; 0000 01A9 SEND_Str("\";\r");
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0000 01AA    delay_ms(15000);
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0000 01AB     CLEAR_BUF();
;PCODE: $0000025F VOL: 0
; 0000 01AC  }
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0

	.DSEG
_0x55:
	.BYTE 0x5
; //**********************************************************************************************
;  char SEND_SMS(unsigned char nom)
; 0000 01AF 
; 0000 01B0   {      //unsigned char NOM[12];

	.CSEG
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
; 0000 01B1    //char *d;
; 0000 01B2    char s;
; 0000 01B3 switch (nom)
;PCODE: $00000266 VOL: 0
;	nom -> Y+1
;	s -> R17
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0000 01B4     {
; 0000 01B5      case 1:
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0000 01B6 			{
; 0000 01B7 			    SEND_Str("AT+CPBF=\"N1\"\r");
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0000 01B8 				break;
;PCODE: $0000026F VOL: 0
; 0000 01B9 			}
; 0000 01BA 
; 0000 01BB      case 2:
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
; 0000 01BC 			{
; 0000 01BD 			    SEND_Str("AT+CPBF=\"N2\"\r");
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0000 01BE 				break;
;PCODE: $00000277 VOL: 0
; 0000 01BF 			}
; 0000 01C0 
; 0000 01C1      case 3:
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
; 0000 01C2 			{
; 0000 01C3 			    SEND_Str("AT+CPBF=\"N3\"\r");
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
; 0000 01C4 				break;
;PCODE: $0000027F VOL: 0
; 0000 01C5 			}
; 0000 01C6 
; 0000 01C7      case 4:
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
; 0000 01C8 			{
; 0000 01C9 			    SEND_Str("AT+CPBF=\"N4\"\r");
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
; 0000 01CA 				break;
;PCODE: $00000287 VOL: 0
; 0000 01CB 			}
; 0000 01CC 
; 0000 01CD      case 5:
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0000 01CE 			{
; 0000 01CF 			    SEND_Str("AT+CPBF=\"N5\"\r");
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
; 0000 01D0 				break;
;PCODE: $0000028F VOL: 0
; 0000 01D1 			}
; 0000 01D2 
; 0000 01D3      case 6:
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
; 0000 01D4 			{
; 0000 01D5 			    SEND_Str("AT+CPBF=\"N6\"\r");
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0000 01D6 				break;
;PCODE: $00000297 VOL: 0
; 0000 01D7 			}
; 0000 01D8 
; 0000 01D9 
; 0000 01DA     }
;PCODE: $00000298 VOL: 0
; 0000 01DB     delay_ms(100);
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0000 01DC 
; 0000 01DD    if(SET_NR()==0) {s=0; return s; }
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0000 01DE 
; 0000 01DF     do{SEND_Str("AT+CMGF=0\r");     // Установка PDU режима
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
; 0000 01E0        }while(TEST_OK()==0);
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0000 01E1 
; 0000 01E2     do{ CLEAR_BUF();
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0000 01E3      SEND_Str("AT+CMGS=39\r");  //    Ввод команды отправки сообщения
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0000 01E4       }while (strrchr(rx_buffer, '>')==NULL);
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0000 01E5       CLEAR_BUF();
;PCODE: $000002C2 VOL: 0
; 0000 01E6 
; 0000 01E7       SEND_Str("0001000B91");     // Ввод настроек PDU
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
; 0000 01E8 
; 0000 01E9       for(i=0;i<12;i++)            // Ввод номера
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0000 01EA       {UART_Transmit(NR[i]);}
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
; 0000 01EB        SEND_Str("00081A0414043204350440044C0020043E0442043A0440044B04420430\x1A"); // Ввод текста сообщения
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
; 0000 01EC         CLEAR_BUF();
;PCODE: $000002DF VOL: 0
; 0000 01ED        delay_ms(5000);
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
; 0000 01EE 
; 0000 01EF   }
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; //==================ФУНКЦИИ ДЛЯ РАБОТЫ С ТРАНСИВЕРОМ============================================
; //*******************************************************************************************
; unsigned char SPI_SEND(unsigned char data)  // Передать/принять байт  по SPI
; 0000 01F3 {
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0000 01F4 SPDR = data;
;	data -> Y+0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
; 0000 01F5 		while (!(SPSR & (1<<SPIF)));
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
; 0000 01F6 		return SPDR;
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0000 01F7 }
;PCODE: $000002F5 VOL: 0
;
;
;//********************************************************************************************
; void RESET_TR(void) //Сброс трансивера по включению питания
; 0000 01FC {
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
; 0000 01FD SPCR=0x00; //Отключение SPI
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
; 0000 01FE PORTB.5=1; //Устанавливаем 1 на SCK
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
; 0000 01FF PORTB.3=0;  // Устанавливаем 0 на MOSI
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
; 0000 0200 PORTB.2=0; // SPI_SS ON
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
; 0000 0201 delay_us(1);
;PCODE: $00000300 VOL: 0
; 0000 0202 PORTB.2=1; // SPI_SS OFF
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
; 0000 0203 delay_us(40);
;PCODE: $00000303 VOL: 0
; 0000 0204 SPCR=0x50; //Включение SPI
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
; 0000 0205 PORTB.2=0; // SPI_SS ON
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
; 0000 0206 while(PINB.4==1); //Ждем 0 на MISO
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
; 0000 0207 SPI_SEND(SRES);
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
; 0000 0208 PORTB.2=1; // SPI_SS OFF
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
; 0000 0209 }
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;//*******************************************************************************************
;void WRITE_REG( unsigned int reg) // Функция записи регистра
; 0000 020C {  union U dat;
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
; 0000 020D PORTB.2=0; // SPI_SS ON
;PCODE: $00000317 VOL: 0
;	reg -> Y+2
;	dat -> Y+0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
; 0000 020E while(PINB.4==1); //Ждем 0 на MISO
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
; 0000 020F 
; 0000 0210  dat.buf=reg;
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
; 0000 0211  SPI_SEND(dat.b[1]);  //Адрес регистра
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
; 0000 0212  SPI_SEND(dat.b[0]);  //Значение регистра
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
; 0000 0213 PORTB.2=1; // SPI_SS OFF
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
; 0000 0214 }
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;//*******************************************************************************************
;//********************************************************************************************
;unsigned char READ_REG(unsigned char adr)  // Функция чтения регистра
; 0000 0218 {  unsigned char reg;
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
; 0000 0219   PORTB.2=0; // SPI_SS ON
;PCODE: $0000032F VOL: 0
;	adr -> Y+1
;	reg -> R17
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
; 0000 021A while(PINB.4==1); //Ждем 0 на MISO
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
; 0000 021B    SPI_SEND(adr | 0x80);   // Старший бит определяет операцию
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
; 0000 021C    reg= SPI_SEND(0x00);
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
; 0000 021D    return reg;
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
; 0000 021E PORTB.2=1; // SPI_SS OFF
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
; 0000 021F }
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;//**********************************************************************************************
; void INIT_TR(void) //Функция инициализации трансивера
; 0000 0222  {
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
; 0000 0223 
; 0000 0224 
; 0000 0225   for (i=0;i<35;i++)
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
; 0000 0226    {
; 0000 0227     WRITE_REG(init[i]);
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
; 0000 0228     };
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
; 0000 0229 
; 0000 022A 
; 0000 022B 
; 0000 022C  }
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
; //********************************************************************************************
;void WRITE_PATABLE(void)    //Запись таблицы мощности
; 0000 022F {
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
; 0000 0230 PORTB.2=0; // SPI_SS ON
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
; 0000 0231 while(PINB.4==1); //Ждем 0 на MISO
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
; 0000 0232 WRITE_REG(0x3EC0);         //Запись значения выходной мощности передатчика +10dbm
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
; 0000 0233   PORTB.2=1; // SPI_SS OFF
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
; 0000 0234 }
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;//*********************************************************************************************
;void STROB(unsigned char strob)  //Запись строб-команды
; 0000 0237 {
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
; 0000 0238 PORTB.2=0; // SPI_SS ON
;	strob -> Y+0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
; 0000 0239 while(PINB.4==1); //Ждем 0 на MISO
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
; 0000 023A  SPI_SEND(strob);
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
; 0000 023B   PORTB.2=1; // SPI_SS OFF
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
; 0000 023C }
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;//******************************************************************************************
;unsigned char STATUS(void)  //Получение статуса трансивера
; 0000 023F { unsigned char st;
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
; 0000 0240 PORTB.2=0; // SPI_SS ON
;PCODE: $0000038B VOL: 0
;	st -> R17
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
; 0000 0241 while(PINB.4==1); //Ждем 0 на MISO
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
; 0000 0242 st=SPI_SEND(SNOP);
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
; 0000 0243  PORTB.2=1; // SPI_SS OFF
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
; 0000 0244 return st;
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
; 0000 0245 }
;PCODE: $0000039D VOL: 0
;//********************************************************************************************
;void SEND_PAKET(unsigned char pktlen) //Функция передачи пакета
; 0000 0248 {
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
; 0000 0249   STROB(SIDLE);  //Переход в режим IDLE
;	pktlen -> Y+0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
; 0000 024A   STROB(SFRX);  //Очистка приемного буфера
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
; 0000 024B   STROB(SFTX); //Очистка передающего буфера
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
; 0000 024C   delay_ms(1);
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
; 0000 024D   PORTB.2=0; // SPI_SS ON
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
; 0000 024E   while(PINB.4==1); //Ждем 0 на MISO
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
; 0000 024F   SPI_SEND(0x7F);   //Открытие буфера на запись
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
; 0000 0250   SPI_SEND(pktlen); //Запись длинны пакета
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
; 0000 0251   for (i=0;i<pktlen;i++)  //Запмсь пакета
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
; 0000 0252   {
; 0000 0253    SPI_SEND(SPI_buffer[i]);
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
; 0000 0254   }
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
; 0000 0255   PORTB.2=1; // SPI_SS OFF
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
; 0000 0256   GICR=0x40; //Запрет прерывания по приему пакета
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
; 0000 0257   STROB(STX); //Включение передачи
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
; 0000 0258 
; 0000 0259   while(PIND.3==0); //Ожидание начала передачи
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
; 0000 025A   while(PIND.3==1); //Ожидание конца передачи
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
; 0000 025B   STROB(SIDLE);  //Переход в режим IDLE
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
; 0000 025C   STROB(SFRX);  //Очистка приемного буфера
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
; 0000 025D   STROB(SFTX); //Очистка передающего буфера
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
; 0000 025E   GIFR|=0x80;  //Сброс флага прерывания
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
; 0000 025F   GICR=0xC0;   //Разрешение прерывания по приему пакета
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
; 0000 0260 }
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
;//********************************************************************************************
;unsigned char RECEIVE_PAKET(void) //Функция приема пакета
; 0000 0263 {
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
; 0000 0264 unsigned char pktlen;
; 0000 0265 STROB(SIDLE);  //Переход в режим IDLE
;PCODE: $000003F8 VOL: 0
;	pktlen -> R17
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
; 0000 0266 PORTB.2=0; // SPI_SS ON
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
; 0000 0267 while(PINB.4==1); //Ждем 0 на MISO
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
; 0000 0268 SPI_SEND(0xFF);  //Открытие буфера приема
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
; 0000 0269 pktlen=SPI_SEND(0x00); //Считывание длинны пакета
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
; 0000 026A for (i=0;i<pktlen;i++)    //Считывание пакета
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
; 0000 026B    {
; 0000 026C    SPI_buffer[i]=SPI_SEND(0x00);
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
; 0000 026D    }
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
; 0000 026E PORTB.2=1; // SPI_SS OFF
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
; 0000 026F STROB(SFRX);
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
; 0000 0270 return pktlen; //Возврат длинны пакета
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
; 0000 0271  }
;PCODE: $0000042E VOL: 0
; //*******************************************************************************************
; void CLEAR_SPI_buffer(void) //Очистка SPI буфера
; 0000 0274  { for (i=0;i<64;i++)
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
; 0000 0275    {
; 0000 0276     SPI_buffer[i]=0x00;
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
; 0000 0277    }
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
; 0000 0278  }
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
; //********************************************************************************************
;  // Запись строки в SPI буффер
; unsigned char Write_SPI_buffer(flash char *str)
; 0000 027C  {
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
; 0000 027D   i=0;
;	*str -> Y+0
;PCODE: $00000448 VOL: 0
; 0000 027E   while(*str)
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
; 0000 027F   {
; 0000 0280   SPI_buffer[i++]=*str++;
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
; 0000 0281 
; 0000 0282   }
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
; 0000 0283  return i;
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
; 0000 0284   }
;PCODE: $0000045F VOL: 0
;//********************************************************************************************
;
;//+++++++++++++++ПРЕРЫВАНИЯ+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;//********************************************************************************************
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void) //Прерывание по сработке датчика
; 0000 028B {   GICR=0x80;
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
; 0000 028C     delay_ms(200);
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
; 0000 028D 
; 0000 028E    if ((z==0x0F)&&(PIND.2==1))
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
; 0000 028F    {  //LightDiode('G');
; 0000 0290     #asm("sei")
;PCODE: $00000471 VOL: 0
	sei
;PCODE: $00000472 VOL: 0
; 0000 0291 
; 0000 0292              for (i=0;i<5;i++)
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
; 0000 0293        {delay_ms(300);
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
; 0000 0294        LightDiode('G');
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
; 0000 0295        delay_ms(300);
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
; 0000 0296        LightDiode('R');
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
; 0000 0297        }
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
; 0000 0298          //delay_ms(10);
; 0000 0299 
; 0000 029A                  /*
; 0000 029B 
; 0000 029C         SEND_Str("AT+CSTA=145\r");
; 0000 029D         delay_ms(100);
; 0000 029E          SEND_Str("AT*PSSTKI=1\r");
; 0000 029F         delay_ms(100);
; 0000 02A0         SEND_Str("AT*PSCSSC=1\r");
; 0000 02A1          delay_ms(100);
; 0000 02A2         SEND_Str("ATD\"+79132425434\";\r");
; 0000 02A3                        */
; 0000 02A4                        /*
; 0000 02A5       do{SEND_Str("AT+CMGF=0\r");     // Установка PDU режима
; 0000 02A6        }while(TEST_OK()==0);
; 0000 02A7 
; 0000 02A8     do{ CLEAR_BUF();
; 0000 02A9      SEND_Str("AT+CMGS=39\r");  //    Ввод команды отправки сообщения
; 0000 02AA       }while (strrchr(rx_buffer, '>')==NULL);
; 0000 02AB       CLEAR_BUF();
; 0000 02AC 
; 0000 02AD       SEND_Str("0001000B91");     // Ввод настроек PDU
; 0000 02AE 
; 0000 02AF       for(i=0;i<12;i++)            // Ввод номера
; 0000 02B0       {UART_Transmit(NR[i]);}
; 0000 02B1        SEND_Str("00081A0414043204350440044C0020043E0442043A0440044B04420430\x1A"); // Ввод текста сообщения
; 0000 02B2                        */
; 0000 02B3 
; 0000 02B4         SEND_SMS(1);
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
; 0000 02B5         CALL(1);
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
; 0000 02B6                 /*
; 0000 02B7        delay_ms(25000);
; 0000 02B8          for(i=0;i<256;i++)
; 0000 02B9         {
; 0000 02BA         STAT[i]=rx_buffer[i];
; 0000 02BB         }
; 0000 02BC                */
; 0000 02BD 
; 0000 02BE        for (i=0;i<5;i++)
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
; 0000 02BF        {delay_ms(300);
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
; 0000 02C0        LightDiode('G');
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
; 0000 02C1        delay_ms(300);
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
; 0000 02C2        LightDiode('R');
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
; 0000 02C3        }
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
; 0000 02C4 
; 0000 02C5    }
; 0000 02C6 
; 0000 02C7     GIFR|=0x40;
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
; 0000 02C8     GICR=0xC0;
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
; 0000 02C9 }
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
;//********************************************************************************************
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)   //Прерывание по приему пакета
; 0000 02CD {
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
; 0000 02CE unsigned char len;
; 0000 02CF while(PIND.3==1);
;PCODE: $000004BA VOL: 0
;	len -> R17
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
; 0000 02D0 len=RECEIVE_PAKET();
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
; 0000 02D1  if (strstr(SPI_buffer,"BRELOK1")!=NULL)
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
; 0000 02D2 
; 0000 02D3     {
; 0000 02D4      if(strstr(SPI_buffer,"CHANGE")!=NULL)
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
; 0000 02D5       {if(z==0x0F) z=0x00;
;PCODE: $000004D3 VOL: 0
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
; 0000 02D6       else z=0x0F;}
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
; 0000 02D7 
; 0000 02D8 
; 0000 02D9     CLEAR_SPI_buffer();
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
; 0000 02DA     STROB(SIDLE);
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
; 0000 02DB     STROB(SFRX);
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
; 0000 02DC     STROB(SFTX);
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
; 0000 02DD     if (z==0x0F )
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
; 0000 02DE     {len=Write_SPI_buffer("SECUR");
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
; 0000 02DF      LightDiode('R');}
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
; 0000 02E0     else {len=Write_SPI_buffer("IDLE");
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
; 0000 02E1         LightDiode('G');}
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
; 0000 02E2    delay_ms(3);
;PCODE: $000004FD VOL: 0
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
; 0000 02E3    SEND_PAKET(len);
;PCODE: $00000500 VOL: 0
;PCODE: $00000501 VOL: 0
; 0000 02E4    delay_ms(1);
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
; 0000 02E5    }
; 0000 02E6    STROB(SRX);
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
;PCODE: $00000508 VOL: 0
; 0000 02E7    CLEAR_SPI_buffer();
;PCODE: $00000509 VOL: 0
; 0000 02E8 
; 0000 02E9 }
;PCODE: $0000050A VOL: 0
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0

	.DSEG
_0xD6:
	.BYTE 0xF
;
;//********************************************************************************************
;/// Функция обработки прерывания по приему символа USART
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 02EE {

	.CSEG
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
; 0000 02EF char status,data;
; 0000 02F0 status=UCSRA;
;PCODE: $00000510 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000511 VOL: 0
;PCODE: $00000512 VOL: 0
; 0000 02F1 data=UDR;
;PCODE: $00000513 VOL: 0
;PCODE: $00000514 VOL: 0
; 0000 02F2 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
; 0000 02F3    {
; 0000 02F4    if (rx_wr_index != RX_BUFFER_SIZE) rx_buffer[rx_wr_index++]=data;
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
; 0000 02F5 
; 0000 02F6       }
;PCODE: $00000521 VOL: 0
; 0000 02F7    }
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
;
;//=============================================================================================
;//*****************************ОСНОВНАЯ ФУНКЦИЯ ПРОГРАММЫ*************************************
;//===============================================================================================
;void main(void)
; 0000 02FD {
;PCODE: $00000527 VOL: 0
; 0000 02FE // Declare your local variables here
; 0000 02FF 
; 0000 0300 // Input/Output Ports initialization
; 0000 0301 // Port B initialization
; 0000 0302 // Func7=In Func6=In Func5=Out Func4=In Func3=Out Func2=Out Func1=In Func0=In
; 0000 0303 // State7=T State6=T State5=0 State4=T State3=0 State2=1 State1=T State0=T
; 0000 0304 PORTB=0x04;
;PCODE: $00000528 VOL: 0
;PCODE: $00000529 VOL: 0
; 0000 0305 DDRB=0x2C;
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
; 0000 0306 
; 0000 0307 // Port C initialization
; 0000 0308 // Func6=In Func5=Out Func4=Out Func3=In Func2=Out Func1=In Func0=Out
; 0000 0309 // State6=T State5=0 State4=0 State3=T State2=1 State1=T State0=1
; 0000 030A PORTC=0x05;
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
; 0000 030B DDRC=0x35;
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
; 0000 030C 
; 0000 030D // Port D initialization
; 0000 030E // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=Out Func0=In
; 0000 030F // State7=T State6=T State5=T State4=T State3=T State2=P State1=0 State0=T
; 0000 0310 PORTD=0x04;
;PCODE: $00000530 VOL: 0
;PCODE: $00000531 VOL: 0
; 0000 0311 DDRD=0x02;
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
; 0000 0312 
; 0000 0313 // Timer/Counter 0 initialization
; 0000 0314 // Clock source: System Clock
; 0000 0315 // Clock value: Timer 0 Stopped
; 0000 0316 TCCR0=0x00;
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
; 0000 0317 TCNT0=0x00;
;PCODE: $00000536 VOL: 0
;PCODE: $00000537 VOL: 0
; 0000 0318 
; 0000 0319 // Timer/Counter 1 initialization
; 0000 031A // Clock source: System Clock
; 0000 031B // Clock value: Timer1 Stopped
; 0000 031C // Mode: Normal top=0xFFFF
; 0000 031D // OC1A output: Discon.
; 0000 031E // OC1B output: Discon.
; 0000 031F // Noise Canceler: Off
; 0000 0320 // Input Capture on Falling Edge
; 0000 0321 // Timer1 Overflow Interrupt: Off
; 0000 0322 // Input Capture Interrupt: Off
; 0000 0323 // Compare A Match Interrupt: Off
; 0000 0324 // Compare B Match Interrupt: Off
; 0000 0325 TCCR1A=0x00;
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
; 0000 0326 TCCR1B=0x00;
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
; 0000 0327 TCNT1H=0x00;
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
; 0000 0328 TCNT1L=0x00;
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
; 0000 0329 ICR1H=0x00;
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
; 0000 032A ICR1L=0x00;
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
; 0000 032B OCR1AH=0x00;
;PCODE: $00000544 VOL: 0
;PCODE: $00000545 VOL: 0
; 0000 032C OCR1AL=0x00;
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
; 0000 032D OCR1BH=0x00;
;PCODE: $00000548 VOL: 0
;PCODE: $00000549 VOL: 0
; 0000 032E OCR1BL=0x00;
;PCODE: $0000054A VOL: 0
;PCODE: $0000054B VOL: 0
; 0000 032F 
; 0000 0330 // Timer/Counter 2 initialization
; 0000 0331 // Clock source: System Clock
; 0000 0332 // Clock value: Timer2 Stopped
; 0000 0333 // Mode: Normal top=0xFF
; 0000 0334 // OC2 output: Disconnected
; 0000 0335 ASSR=0x00;
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
; 0000 0336 TCCR2=0x00;
;PCODE: $0000054E VOL: 0
;PCODE: $0000054F VOL: 0
; 0000 0337 TCNT2=0x00;
;PCODE: $00000550 VOL: 0
;PCODE: $00000551 VOL: 0
; 0000 0338 OCR2=0x00;
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
; 0000 0339 
; 0000 033A // External Interrupt(s) initialization
; 0000 033B // INT0: On
; 0000 033C // INT0 Mode: Rising Edge
; 0000 033D // INT1: On
; 0000 033E // INT1 Mode: Rising Edge
; 0000 033F GICR|=0xC0;
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
;PCODE: $00000556 VOL: 0
; 0000 0340 MCUCR=0x0F;
;PCODE: $00000557 VOL: 0
;PCODE: $00000558 VOL: 0
; 0000 0341 GIFR=0xC0;
;PCODE: $00000559 VOL: 0
;PCODE: $0000055A VOL: 0
; 0000 0342 
; 0000 0343 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0344 TIMSK=0x00;
;PCODE: $0000055B VOL: 0
;PCODE: $0000055C VOL: 0
; 0000 0345 
; 0000 0346 // USART initialization
; 0000 0347 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0348 // USART Receiver: On
; 0000 0349 // USART Transmitter: On
; 0000 034A // USART Mode: Asynchronous
; 0000 034B // USART Baud Rate: 115200
; 0000 034C UCSRA=0x00;
;PCODE: $0000055D VOL: 0
;PCODE: $0000055E VOL: 0
; 0000 034D UCSRB=0x98;
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
; 0000 034E UCSRC=0x86;
;PCODE: $00000561 VOL: 0
;PCODE: $00000562 VOL: 0
; 0000 034F UBRRH=0x00;
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
; 0000 0350 UBRRL=0x01;
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
; 0000 0351 
; 0000 0352 // Analog Comparator initialization
; 0000 0353 // Analog Comparator: Off
; 0000 0354 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0355 ACSR=0x80;
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
; 0000 0356 SFIOR=0x00;
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
; 0000 0357 
; 0000 0358 // ADC initialization
; 0000 0359 // ADC disabled
; 0000 035A ADCSRA=0x00;
;PCODE: $0000056B VOL: 0
;PCODE: $0000056C VOL: 0
; 0000 035B 
; 0000 035C // SPI initialization
; 0000 035D // SPI Type: Master
; 0000 035E // SPI Clock Rate: 921,600 kHz
; 0000 035F // SPI Clock Phase: Cycle Start
; 0000 0360 // SPI Clock Polarity: Low
; 0000 0361 // SPI Data Order: MSB First
; 0000 0362 SPCR=0x50;
;PCODE: $0000056D VOL: 0
;PCODE: $0000056E VOL: 0
; 0000 0363 SPSR=0x00;
;PCODE: $0000056F VOL: 0
;PCODE: $00000570 VOL: 0
; 0000 0364 
; 0000 0365 // TWI initialization
; 0000 0366 // TWI disabled
; 0000 0367 TWCR=0x00;
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
; 0000 0368 
; 0000 0369 #asm("cli")
;PCODE: $00000573 VOL: 0
	cli
;PCODE: $00000574 VOL: 0
; 0000 036A LightDiode('G');
;PCODE: $00000575 VOL: 0
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
; 0000 036B delay_ms(1000);
;PCODE: $00000578 VOL: 0
;PCODE: $00000579 VOL: 0
;PCODE: $0000057A VOL: 0
; 0000 036C for(i=0;i<256;i++) STAT[i]=0xFF;
;PCODE: $0000057B VOL: 0
;PCODE: $0000057C VOL: 0
;PCODE: $0000057D VOL: 0
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
;PCODE: $00000584 VOL: 0
;PCODE: $00000585 VOL: 0
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
;PCODE: $00000588 VOL: 0
;PCODE: $00000589 VOL: 0
;PCODE: $0000058A VOL: 0
;PCODE: $0000058B VOL: 0
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
; 0000 036E RESET_TR();
;PCODE: $0000058E VOL: 0
; 0000 036F  delay_ms(10);
;PCODE: $0000058F VOL: 0
;PCODE: $00000590 VOL: 0
;PCODE: $00000591 VOL: 0
; 0000 0370  INIT_TR();
;PCODE: $00000592 VOL: 0
; 0000 0371  WRITE_PATABLE();
;PCODE: $00000593 VOL: 0
; 0000 0372  STROB(SIDLE);
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
;PCODE: $00000596 VOL: 0
; 0000 0373  STROB(SFRX);
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
;PCODE: $00000599 VOL: 0
; 0000 0374  STROB(SFTX);
;PCODE: $0000059A VOL: 0
;PCODE: $0000059B VOL: 0
;PCODE: $0000059C VOL: 0
; 0000 0375  STROB(SRX);
;PCODE: $0000059D VOL: 0
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
; 0000 0376  delay_ms(1);
;PCODE: $000005A0 VOL: 0
;PCODE: $000005A1 VOL: 0
;PCODE: $000005A2 VOL: 0
; 0000 0377  GIFR|=0x80;
;PCODE: $000005A3 VOL: 0
;PCODE: $000005A4 VOL: 0
;PCODE: $000005A5 VOL: 0
; 0000 0378 // Global enable interrupts
; 0000 0379 #asm("sei")
;PCODE: $000005A6 VOL: 0
	sei
;PCODE: $000005A7 VOL: 0
; 0000 037A //============================================ИНИЦИАЛИЗАЦИЯ МОДЕМА======================================================================
; 0000 037B 
; 0000 037C  RESET_MODEM();
;PCODE: $000005A8 VOL: 0
; 0000 037D 
; 0000 037E    do{ SEND_Str("AT+COPS?\r");     //Определение оператора сотовой связи
;PCODE: $000005A9 VOL: 0
;PCODE: $000005AA VOL: 0
;PCODE: $000005AB VOL: 0
;PCODE: $000005AC VOL: 0
;PCODE: $000005AD VOL: 0
; 0000 037F   delay_ms(50);
;PCODE: $000005AE VOL: 0
;PCODE: $000005AF VOL: 0
;PCODE: $000005B0 VOL: 0
; 0000 0380   }while(strstr(rx_buffer, "+COPS:")==NULL);
;PCODE: $000005B1 VOL: 0
;PCODE: $000005B2 VOL: 0
;PCODE: $000005B3 VOL: 0
;PCODE: $000005B4 VOL: 0
;PCODE: $000005B5 VOL: 0
;PCODE: $000005B6 VOL: 0
;PCODE: $000005B7 VOL: 0
;PCODE: $000005B8 VOL: 0
;PCODE: $000005B9 VOL: 0
;PCODE: $000005BA VOL: 0
;PCODE: $000005BB VOL: 0
; 0000 0381  if( strstr(rx_buffer, "Beeline")!=NULL ) OP=1;
;PCODE: $000005BC VOL: 0
;PCODE: $000005BD VOL: 0
;PCODE: $000005BE VOL: 0
;PCODE: $000005BF VOL: 0
;PCODE: $000005C0 VOL: 0
;PCODE: $000005C1 VOL: 0
;PCODE: $000005C2 VOL: 0
;PCODE: $000005C3 VOL: 0
;PCODE: $000005C4 VOL: 0
;PCODE: $000005C5 VOL: 0
;PCODE: $000005C6 VOL: 0
; 0000 0382   else OP=0;
;PCODE: $000005C7 VOL: 0
;PCODE: $000005C8 VOL: 0
;PCODE: $000005C9 VOL: 0
;PCODE: $000005CA VOL: 0
;PCODE: $000005CB VOL: 0
; 0000 0383    CLEAR_BUF();
;PCODE: $000005CC VOL: 0
;PCODE: $000005CD VOL: 0
; 0000 0384            /*
; 0000 0385 
; 0000 0386     do{     SEND_Str("AT+CPBF=\"N1\"\r");  // Считывание телефонного номера с SIM карты
; 0000 0387        #asm("wdr")
; 0000 0388       } while(SET_NR()==0);      // Преобразование номера в PDU формат
; 0000 0389 
; 0000 038A    CALL(1);
; 0000 038B             */
; 0000 038C             LightDiode('R');
;PCODE: $000005CE VOL: 0
;PCODE: $000005CF VOL: 0
;PCODE: $000005D0 VOL: 0
; 0000 038D 
; 0000 038E 
; 0000 038F 
; 0000 0390           SEND_Str("AT+CLIP=1\r");
;PCODE: $000005D1 VOL: 0
;PCODE: $000005D2 VOL: 0
;PCODE: $000005D3 VOL: 0
;PCODE: $000005D4 VOL: 0
; 0000 0391            CLEAR_BUF();
;PCODE: $000005D5 VOL: 0
; 0000 0392        for(i=0;i<30;i++)
;PCODE: $000005D6 VOL: 0
;PCODE: $000005D7 VOL: 0
;PCODE: $000005D8 VOL: 0
;PCODE: $000005D9 VOL: 0
;PCODE: $000005DA VOL: 0
;PCODE: $000005DB VOL: 0
;PCODE: $000005DC VOL: 0
;PCODE: $000005DD VOL: 0
;PCODE: $000005DE VOL: 0
; 0000 0393        {
; 0000 0394         if( strstr(rx_buffer, "RING")!=NULL)
;PCODE: $000005DF VOL: 0
;PCODE: $000005E0 VOL: 0
;PCODE: $000005E1 VOL: 0
;PCODE: $000005E2 VOL: 0
;PCODE: $000005E3 VOL: 0
;PCODE: $000005E4 VOL: 0
;PCODE: $000005E5 VOL: 0
;PCODE: $000005E6 VOL: 0
; 0000 0395          {  delay_ms(300);
;PCODE: $000005E7 VOL: 0
;PCODE: $000005E8 VOL: 0
;PCODE: $000005E9 VOL: 0
; 0000 0396          SEND_Str("ATH\r");
;PCODE: $000005EA VOL: 0
;PCODE: $000005EB VOL: 0
;PCODE: $000005EC VOL: 0
;PCODE: $000005ED VOL: 0
; 0000 0397          delay_ms(5000);
;PCODE: $000005EE VOL: 0
;PCODE: $000005EF VOL: 0
;PCODE: $000005F0 VOL: 0
; 0000 0398          break;
;PCODE: $000005F1 VOL: 0
; 0000 0399          }
; 0000 039A         delay_ms(1000);
;PCODE: $000005F2 VOL: 0
;PCODE: $000005F3 VOL: 0
;PCODE: $000005F4 VOL: 0
;PCODE: $000005F5 VOL: 0
; 0000 039B        }
;PCODE: $000005F6 VOL: 0
;PCODE: $000005F7 VOL: 0
;PCODE: $000005F8 VOL: 0
;PCODE: $000005F9 VOL: 0
;PCODE: $000005FA VOL: 0
;PCODE: $000005FB VOL: 0
; 0000 039C 
; 0000 039D         x=strstr(rx_buffer, "\"+7");
;PCODE: $000005FC VOL: 0
;PCODE: $000005FD VOL: 0
;PCODE: $000005FE VOL: 0
;PCODE: $000005FF VOL: 0
;PCODE: $00000600 VOL: 0
;PCODE: $00000601 VOL: 0
;PCODE: $00000602 VOL: 0
; 0000 039E 
; 0000 039F         if(x!=NULL)
;PCODE: $00000603 VOL: 0
;PCODE: $00000604 VOL: 0
; 0000 03A0         {
; 0000 03A1           x=x+1;
;PCODE: $00000605 VOL: 0
;PCODE: $00000606 VOL: 0
;PCODE: $00000607 VOL: 0
; 0000 03A2          for(i=0;i<12;i++)
;PCODE: $00000608 VOL: 0
;PCODE: $00000609 VOL: 0
;PCODE: $0000060A VOL: 0
;PCODE: $0000060B VOL: 0
;PCODE: $0000060C VOL: 0
;PCODE: $0000060D VOL: 0
;PCODE: $0000060E VOL: 0
;PCODE: $0000060F VOL: 0
;PCODE: $00000610 VOL: 0
; 0000 03A3           {NR[i]=*x;
;PCODE: $00000611 VOL: 0
;PCODE: $00000612 VOL: 0
;PCODE: $00000613 VOL: 0
;PCODE: $00000614 VOL: 0
;PCODE: $00000615 VOL: 0
;PCODE: $00000616 VOL: 0
;PCODE: $00000617 VOL: 0
; 0000 03A4            x=x+1;
;PCODE: $00000618 VOL: 0
;PCODE: $00000619 VOL: 0
;PCODE: $0000061A VOL: 0
; 0000 03A5           }
;PCODE: $0000061B VOL: 0
;PCODE: $0000061C VOL: 0
;PCODE: $0000061D VOL: 0
;PCODE: $0000061E VOL: 0
;PCODE: $0000061F VOL: 0
;PCODE: $00000620 VOL: 0
; 0000 03A6 
; 0000 03A7         CLEAR_BUF();
;PCODE: $00000621 VOL: 0
; 0000 03A8         delay_ms(300);
;PCODE: $00000622 VOL: 0
;PCODE: $00000623 VOL: 0
;PCODE: $00000624 VOL: 0
; 0000 03A9 
; 0000 03AA         SEND_Str("AT+CPBF=\"N1\"\r");
;PCODE: $00000625 VOL: 0
;PCODE: $00000626 VOL: 0
;PCODE: $00000627 VOL: 0
;PCODE: $00000628 VOL: 0
; 0000 03AB         delay_ms(300);
;PCODE: $00000629 VOL: 0
;PCODE: $0000062A VOL: 0
;PCODE: $0000062B VOL: 0
; 0000 03AC         // SEND_Str("AT+CPBF=\"N2\"\r");
; 0000 03AD 
; 0000 03AE          if(strstr(rx_buffer, NR)==NULL)
;PCODE: $0000062C VOL: 0
;PCODE: $0000062D VOL: 0
;PCODE: $0000062E VOL: 0
;PCODE: $0000062F VOL: 0
;PCODE: $00000630 VOL: 0
;PCODE: $00000631 VOL: 0
;PCODE: $00000632 VOL: 0
; 0000 03AF           {
; 0000 03B0            SEND_Str("AT+CPBW=1,\"");
;PCODE: $00000633 VOL: 0
;PCODE: $00000634 VOL: 0
;PCODE: $00000635 VOL: 0
;PCODE: $00000636 VOL: 0
; 0000 03B1             for(i=0;i<12;i++)            // Ввод номера
;PCODE: $00000637 VOL: 0
;PCODE: $00000638 VOL: 0
;PCODE: $00000639 VOL: 0
;PCODE: $0000063A VOL: 0
;PCODE: $0000063B VOL: 0
;PCODE: $0000063C VOL: 0
;PCODE: $0000063D VOL: 0
;PCODE: $0000063E VOL: 0
;PCODE: $0000063F VOL: 0
; 0000 03B2             {UART_Transmit(NR[i]);}
;PCODE: $00000640 VOL: 0
;PCODE: $00000641 VOL: 0
;PCODE: $00000642 VOL: 0
;PCODE: $00000643 VOL: 0
;PCODE: $00000644 VOL: 0
;PCODE: $00000645 VOL: 0
;PCODE: $00000646 VOL: 0
;PCODE: $00000647 VOL: 0
;PCODE: $00000648 VOL: 0
;PCODE: $00000649 VOL: 0
;PCODE: $0000064A VOL: 0
; 0000 03B3             SEND_Str("\",145,\"N1\"\r");
;PCODE: $0000064B VOL: 0
;PCODE: $0000064C VOL: 0
;PCODE: $0000064D VOL: 0
;PCODE: $0000064E VOL: 0
; 0000 03B4             for(i=0;i<5;i++)
;PCODE: $0000064F VOL: 0
;PCODE: $00000650 VOL: 0
;PCODE: $00000651 VOL: 0
;PCODE: $00000652 VOL: 0
;PCODE: $00000653 VOL: 0
;PCODE: $00000654 VOL: 0
;PCODE: $00000655 VOL: 0
;PCODE: $00000656 VOL: 0
;PCODE: $00000657 VOL: 0
; 0000 03B5             { LightDiode('R');
;PCODE: $00000658 VOL: 0
;PCODE: $00000659 VOL: 0
;PCODE: $0000065A VOL: 0
; 0000 03B6               delay_ms(300);
;PCODE: $0000065B VOL: 0
;PCODE: $0000065C VOL: 0
;PCODE: $0000065D VOL: 0
; 0000 03B7               LightDiode('G');
;PCODE: $0000065E VOL: 0
;PCODE: $0000065F VOL: 0
;PCODE: $00000660 VOL: 0
; 0000 03B8               delay_ms(300);
;PCODE: $00000661 VOL: 0
;PCODE: $00000662 VOL: 0
;PCODE: $00000663 VOL: 0
; 0000 03B9             }
;PCODE: $00000664 VOL: 0
;PCODE: $00000665 VOL: 0
;PCODE: $00000666 VOL: 0
;PCODE: $00000667 VOL: 0
;PCODE: $00000668 VOL: 0
;PCODE: $00000669 VOL: 0
; 0000 03BA           }
; 0000 03BB          else{
;PCODE: $0000066A VOL: 0
;PCODE: $0000066B VOL: 0
; 0000 03BC            for(i=0;i<5;i++)
;PCODE: $0000066C VOL: 0
;PCODE: $0000066D VOL: 0
;PCODE: $0000066E VOL: 0
;PCODE: $0000066F VOL: 0
;PCODE: $00000670 VOL: 0
;PCODE: $00000671 VOL: 0
;PCODE: $00000672 VOL: 0
;PCODE: $00000673 VOL: 0
;PCODE: $00000674 VOL: 0
; 0000 03BD             { LightDiode('T');
;PCODE: $00000675 VOL: 0
;PCODE: $00000676 VOL: 0
;PCODE: $00000677 VOL: 0
; 0000 03BE               delay_ms(300);
;PCODE: $00000678 VOL: 0
;PCODE: $00000679 VOL: 0
;PCODE: $0000067A VOL: 0
; 0000 03BF               LightDiode('R');
;PCODE: $0000067B VOL: 0
;PCODE: $0000067C VOL: 0
;PCODE: $0000067D VOL: 0
; 0000 03C0               delay_ms(300);
;PCODE: $0000067E VOL: 0
;PCODE: $0000067F VOL: 0
;PCODE: $00000680 VOL: 0
; 0000 03C1             }
;PCODE: $00000681 VOL: 0
;PCODE: $00000682 VOL: 0
;PCODE: $00000683 VOL: 0
;PCODE: $00000684 VOL: 0
;PCODE: $00000685 VOL: 0
;PCODE: $00000686 VOL: 0
; 0000 03C2 
; 0000 03C3          }
;PCODE: $00000687 VOL: 0
; 0000 03C4         }
; 0000 03C5          delay_ms(100);
;PCODE: $00000688 VOL: 0
;PCODE: $00000689 VOL: 0
;PCODE: $0000068A VOL: 0
;PCODE: $0000068B VOL: 0
; 0000 03C6         SEND_Str("AT+CPBS?\r");
;PCODE: $0000068C VOL: 0
;PCODE: $0000068D VOL: 0
;PCODE: $0000068E VOL: 0
;PCODE: $0000068F VOL: 0
; 0000 03C7 
; 0000 03C8 
; 0000 03C9 
; 0000 03CA 
; 0000 03CB 
; 0000 03CC     delay_ms(15000);
;PCODE: $00000690 VOL: 0
;PCODE: $00000691 VOL: 0
;PCODE: $00000692 VOL: 0
; 0000 03CD          for(i=0;i<256;i++)
;PCODE: $00000693 VOL: 0
;PCODE: $00000694 VOL: 0
;PCODE: $00000695 VOL: 0
;PCODE: $00000696 VOL: 0
;PCODE: $00000697 VOL: 0
;PCODE: $00000698 VOL: 0
;PCODE: $00000699 VOL: 0
;PCODE: $0000069A VOL: 0
;PCODE: $0000069B VOL: 0
; 0000 03CE         {
; 0000 03CF         STAT[i]=rx_buffer[i];
;PCODE: $0000069C VOL: 0
;PCODE: $0000069D VOL: 0
;PCODE: $0000069E VOL: 0
;PCODE: $0000069F VOL: 0
;PCODE: $000006A0 VOL: 0
;PCODE: $000006A1 VOL: 0
;PCODE: $000006A2 VOL: 0
;PCODE: $000006A3 VOL: 0
; 0000 03D0         }
;PCODE: $000006A4 VOL: 0
;PCODE: $000006A5 VOL: 0
;PCODE: $000006A6 VOL: 0
;PCODE: $000006A7 VOL: 0
;PCODE: $000006A8 VOL: 0
;PCODE: $000006A9 VOL: 0
; 0000 03D1 
; 0000 03D2  //=====================================================================================================================================
; 0000 03D3         z=0x00;
;PCODE: $000006AA VOL: 0
; 0000 03D4         LightDiode('G');
;PCODE: $000006AB VOL: 0
;PCODE: $000006AC VOL: 0
;PCODE: $000006AD VOL: 0
; 0000 03D5 
; 0000 03D6 
; 0000 03D7           /*
; 0000 03D8         for(i=0;i<256;i++)
; 0000 03D9         {
; 0000 03DA         STAT[i]=rx_buffer[i];
; 0000 03DB         }
; 0000 03DC              */
; 0000 03DD 
; 0000 03DE 
; 0000 03DF while (1)
;PCODE: $000006AE VOL: 0
; 0000 03E0       {
; 0000 03E1       // Place your code here
; 0000 03E2 
; 0000 03E3       }
;PCODE: $000006AF VOL: 0
;PCODE: $000006B0 VOL: 0
; 0000 03E4 }
;PCODE: $000006B1 VOL: 0
;PCODE: $000006B2 VOL: 0
;PCODE: $000006B3 VOL: 0

	.DSEG
_0xE4:
	.BYTE 0x18
