;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 03.04.2012
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8L
;Program type            : Application
;AVR Core Clock frequency: 3,686400 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <spi.h>
;#include <delay.h>
;#include <string.h>
;#include <stdlib.h>
;#include <stdio.h>
;//++++++++++++ Определение строб-комманд трансивера+++++++++++++++++++++++++++++++++++++++++++++++++++++
;#define SRES 0x30 //Сброс трансивера
;#define SIDLE 0x36 //Переход в режим IDLE
;#define SCAL 0x33   // Калибровка частотного синтезатора
;#define SRX 0x34   // Переход в режим RX
;#define STX 0x35   // Переход в режим TX
;#define SFRX 0x3A  // Очистка RX FIFO
;#define SFTX 0x3B  // Очистка TX FIFO
;#define SNOP 0x3D  // Пустая строб-команда
;//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; // Массив инициализации регистров (старший байт - адрес, младший - значение)
;flash unsigned int init[37]={0x0B08,     //0 FSCTRL1  Параметры синтезатора частоты
;                             0x0C00,     //1 FSCTRL0
;                             0x0D5A,     //2 FREQ2 Определение базовой несущей частоты
;                             0x0E1C,     //3 FREQ1
;                             0x0F71,     //4 FREQ0
;                             0x1008,     //5 MDMCFG4 ПАРАМЕТРЫ МОДЕМА ширина полосы пропускания
;                             0x1184,     //6 MDMCFG3 скорость передачи
;                             0x1274,     //7 MDMCFG2 вид модуляции параметры слова синхронизации
;                             0x1302,     //8 MDMCFG1 длинна приамбулы включение FEC
;                             0x14E5,     //9 MDMCFG0 величина разноса каналлов
;                             0x0AEC,     //10 CHANNR номер канала
;                             0x1504,     //11 DEVIATN девиация
;                             0x2156,     //12 FREND1
;                             0x2210,     //13 FREND0
;                             0x1607,     //14 MCSM2   ПАРАМЕТРЫ КОНТРОЛЯ РАДИО
;                             0x1730,     //15 MCSM1
;                             0x1818,     //16 MCSM0
;                             0x1916,     //17 FOCCFG компенсация сдвига частоты
;                             0x1A6C,     //18 BSCFG кофигурация побитовой синхронизации
;                             0x1BFB,     //19 AGCCTRL2 Параметры МШУ и порог чувствительности при приеме
;                             0x1C40,     //20 AGCCTRL1
;                             0x1D91,     //21 AGCCTRL0
;                             0x23A9,     //22 FSCAL3  Параметры калибровки синтезатора
;                             0x240A,     //23 FSCAL2
;                             0x2500,     //24 FSCAL1
;                             0x2611,     //25 FSCAL0
;                             0x2959,     //26 FSTEST
;                             0x2C88,     //27 TEST2
;                             0x2D31,     //28 TEST1
;                             0x2E0B,     //29 TEST0
;                             0x0006,     //30 IOCFG2 Конфигурация GDO2 - 1при приеме синхрослова 0 пакет принят
;                             0x020E,     //31 IOCFG0 Конфигурация GDO0 - обнаружение несущей
;                             0x0740,     //32 PKTCTRL1 Конфигурация пакета
;                             0x0805,     //33 PKTCTRL0
;                             0x0900,     //34 ADDR Адрес устройства
;                             0x06FF,     //35 PKTLEN Длинна пакета
;                             0x0307      //36 FIFOTHR граница переполнения FIFO
;                             } ;
;                             //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;union U      // Определение объединения
;		{
;			unsigned int buf;
;			unsigned char b[2];
;		};
;
;union U data;
;union U reg1;
;union U reg0;
;// Определение глобальных переменных
;eeprom unsigned char STATUS[37];
;unsigned char i; //Основной счетчик
;//********************************************************************************************
;void LightDiode(unsigned char n) // Функция управления светодиодом
; 0000 005E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 005F  switch (n)
;	n -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0060  {
; 0000 0061  case 0:
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0062 			{
; 0000 0063 			PORTC.4=0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0064             PORTC.5=0;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0065 				break;
;PCODE: $00000017 VOL: 0
; 0000 0066 			}
; 0000 0067  case 1:
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0068 			{
; 0000 0069 			PORTC.4=1;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 006A             PORTC.5=0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 006B 				break;
;PCODE: $0000001F VOL: 0
; 0000 006C 			}
; 0000 006D  case 2:
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 006E 			{
; 0000 006F 			PORTC.4=0;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0070             PORTC.5=1;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0071 				break;
;PCODE: $00000027 VOL: 0
; 0000 0072  case 3:
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0073 			{
; 0000 0074 			PORTC.4=1;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0075             PORTC.5=1;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0076 				break;
;PCODE: $0000002F VOL: 0
; 0000 0077 			} 			}
; 0000 0078  }
;PCODE: $00000030 VOL: 0
; 0000 0079 
; 0000 007A }
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;//****************************************************************************************************
;//*******************ФУНКЦИИ ДЛЯ РАБОТЫ С ТРАНСИВЕРОМ*****************************************
;//============================================================================================
;//*********************************************************************************************
;unsigned char SPI_SEND(unsigned char data)  // Передать/принять байт  по SPI
; 0000 0080 {
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0081 SPDR = data;
;	data -> Y+0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0082 		while (!(SPSR & (1<<SPIF)));
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0083 		return SPDR;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0084 }
;PCODE: $00000041 VOL: 0
;
;//*******************************************************************************************
;void RESET_TR(void) //Сброс трансивера по включению питания
; 0000 0088 {
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0089 SPCR=0x00; //Отключение SPI
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 008A PORTB.5=1; //Устанавливаем 1 на SCK
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 008B PORTB.3=0;  // Устанавливаем 0 на MOSI
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 008C PORTB.2=0; // SPI_SS ON
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 008D delay_us(1);
;PCODE: $0000004C VOL: 0
; 0000 008E PORTB.2=1; // SPI_SS OFF
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 008F delay_us(40);
;PCODE: $0000004F VOL: 0
; 0000 0090 SPCR=0x50; //Включение SPI
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0091 PORTB.2=0; // SPI_SS ON
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0092 while(PORTB.4==1); //Ждем 0 на MISO
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0093 SPI_SEND(SRES);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0094 PORTB.2=1; // SPI_SS OFF
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0095 }
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;
;//*******************************************************************************************
;void WRITE_REG( unsigned int reg) // Функция записи регистра
; 0000 0099 {
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 009A  union U dat;
; 0000 009B  dat.buf=reg;
;PCODE: $00000063 VOL: 0
;	reg -> Y+2
;	dat -> Y+0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 009C  SPI_SEND(dat.b[1]);  //Адрес регистра
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 009D  SPI_SEND(dat.b[0]);  //Значение регистра
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 009E }
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;//********************************************************************************************
;unsigned char READ_REG(unsigned char adr)  // Функция чтения регистра
; 0000 00A1 {  unsigned char reg;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 00A2    SPI_SEND(adr | 0x80);   // Старший бит определяет операцию
;PCODE: $00000071 VOL: 0
;	adr -> Y+1
;	reg -> R17
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 00A3    reg= SPI_SEND(0xFF);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 00A4    return reg;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00A5 }
;PCODE: $0000007F VOL: 0
;//**********************************************************************************************
; void INIT_TR(void) //Функция инициализации трансивера
; 0000 00A8  { union U dt;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00A9    unsigned char err;
; 0000 00AA   PORTB.2=0; // SPI_SS ON
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;	dt -> Y+1
;	err -> R17
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00AB   while(PORTB.4==1); //Ждем 0 на MISO
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00AC   do{
;PCODE: $0000008C VOL: 0
; 0000 00AD   for (i=0;i<37;i++)
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00AE    {
; 0000 00AF     WRITE_REG(init[i]);
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00B0     };
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00B1     err=0;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00B2 
; 0000 00B3     for (i=0;i<37;i++)
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00B4      {
; 0000 00B5      dt.buf=init[i];
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00B6      if(dt.b[0]!=READ_REG(dt.b[1])){ err=1; }
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00B7      }
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00B8 
; 0000 00B9     }while(err==1);
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00BA 
; 0000 00BB    PORTB.2=1; // SPI_SS OFF
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00BC  }
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;//********************************************************************************************
;void WRITE_PATABLE(void)    //Запись таблицы мощности
; 0000 00BF {
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00C0 PORTB.2=0; // SPI_SS ON
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00C1 while(PORTB.4==1); //Ждем 0 на MISO
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00C2 WRITE_REG(0x3EFF);         //Запись значения выходной мощности передатчика +1dbm
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00C3 PORTB.2=1; // SPI_SS OFF
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00C4 }
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;//*********************************************************************************************
;//++++++++++++++++++++++++++++++++ПРЕРЫВАНИЯ++++++++++++++++++++++++++++++++++++++++++++++++++
;//***********************************************************************************************
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void) //Прерывание по приему пакета
; 0000 00CA {
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00CB  LightDiode(2);
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00CC 
; 0000 00CD // if(PORTD.3==0)    LightDiode(0);
; 0000 00CE  // PORTB.2=0; // SPI_SS ON
; 0000 00CF  //  while(PORTB.4==1); //Ждем 0 на MISO
; 0000 00D0 // STATUS[0]=SPI_SEND(SNOP);
; 0000 00D1  // while(PORTD.3==1);
; 0000 00D2   delay_ms(100);
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00D3   LightDiode(1);
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00D4  // STATUS[1]=SPI_SEND(SNOP);
; 0000 00D5 
; 0000 00D6     //  while(1);
; 0000 00D7 
; 0000 00D8    // STATUS[2]=SPI_SEND(SNOP);
; 0000 00D9     //  PORTB.2=1; // SPI_SS OFF
; 0000 00DA }
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;//*********************************************************************************************
;//============================================================================================
;//+++++++++++++ ОСНОВНАЯ ФУНКЦИЯ ПРОГРАММЫ ++++++++++++++++++++++++++++++++++++++++++++++++++
;//============================================================================================
;void main(void)
; 0000 00E0 {
;PCODE: $000000E9 VOL: 0
; 0000 00E1 // Declare your local variables here
; 0000 00E2 
; 0000 00E3 // Input/Output Ports initialization
; 0000 00E4 // Port B initialization
; 0000 00E5 // Func7=In Func6=In Func5=Out Func4=In Func3=Out Func2=Out Func1=In Func0=In
; 0000 00E6 // State7=T State6=T State5=0 State4=T State3=1 State2=1 State1=T State0=T
; 0000 00E7 PORTB=0x0C;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00E8 DDRB=0x2C;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00E9 
; 0000 00EA // Port C initialization
; 0000 00EB // Func6=In Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 00EC // State6=T State5=0 State4=0 State3=T State2=T State1=T State0=T
; 0000 00ED PORTC=0x00;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 00EE DDRC=0x30;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 00EF 
; 0000 00F0 // Port D initialization
; 0000 00F1 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00F2 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00F3 PORTD=0x08;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00F4 DDRD=0x00;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00F5 
; 0000 00F6 // Timer/Counter 0 initialization
; 0000 00F7 // Clock source: System Clock
; 0000 00F8 // Clock value: Timer 0 Stopped
; 0000 00F9 TCCR0=0x00;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00FA TCNT0=0x00;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00FB 
; 0000 00FC // Timer/Counter 1 initialization
; 0000 00FD // Clock source: System Clock
; 0000 00FE // Clock value: Timer1 Stopped
; 0000 00FF // Mode: Normal top=0xFFFF
; 0000 0100 // OC1A output: Discon.
; 0000 0101 // OC1B output: Discon.
; 0000 0102 // Noise Canceler: Off
; 0000 0103 // Input Capture on Falling Edge
; 0000 0104 // Timer1 Overflow Interrupt: Off
; 0000 0105 // Input Capture Interrupt: Off
; 0000 0106 // Compare A Match Interrupt: Off
; 0000 0107 // Compare B Match Interrupt: Off
; 0000 0108 TCCR1A=0x00;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 0109 TCCR1B=0x00;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 010A TCNT1H=0x00;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 010B TCNT1L=0x00;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 010C ICR1H=0x00;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 010D ICR1L=0x00;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 010E OCR1AH=0x00;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 010F OCR1AL=0x00;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 0110 OCR1BH=0x00;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 0111 OCR1BL=0x00;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 0112 
; 0000 0113 // Timer/Counter 2 initialization
; 0000 0114 // Clock source: System Clock
; 0000 0115 // Clock value: Timer2 Stopped
; 0000 0116 // Mode: Normal top=0xFF
; 0000 0117 // OC2 output: Disconnected
; 0000 0118 ASSR=0x00;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 0119 TCCR2=0x00;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 011A TCNT2=0x00;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 011B OCR2=0x00;
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 011C 
; 0000 011D // External Interrupt(s) initialization
; 0000 011E // INT0: Off
; 0000 011F // INT1: On
; 0000 0120 // INT1 Mode: Rising Edge
; 0000 0121 GICR=0x00;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 0122 MCUCR=0x0C;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 0123 GIFR=0x80;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 0124 
; 0000 0125 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0126 TIMSK=0x00;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 0127 
; 0000 0128 // USART initialization
; 0000 0129 // USART disabled
; 0000 012A UCSRB=0x00;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 012B 
; 0000 012C // Analog Comparator initialization
; 0000 012D // Analog Comparator: Off
; 0000 012E // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 012F ACSR=0x80;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 0130 SFIOR=0x00;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 0131 
; 0000 0132 // ADC initialization
; 0000 0133 // ADC disabled
; 0000 0134 ADCSRA=0x00;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 0135 
; 0000 0136 // SPI initialization
; 0000 0137 // SPI Type: Master
; 0000 0138 // SPI Clock Rate: 921,600 kHz
; 0000 0139 // SPI Clock Phase: Cycle Start
; 0000 013A // SPI Clock Polarity: Low
; 0000 013B // SPI Data Order: MSB First
; 0000 013C SPCR=0x50;
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 013D SPSR=0x00;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 013E 
; 0000 013F // TWI initialization
; 0000 0140 // TWI disabled
; 0000 0141 TWCR=0x00;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0142      #asm("sei")
;PCODE: $0000012C VOL: 0
	sei
;PCODE: $0000012D VOL: 0
; 0000 0143 while (1)
;PCODE: $0000012E VOL: 0
; 0000 0144       {
; 0000 0145       LightDiode(1);
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 0146       delay_ms(1000);
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 0147 
; 0000 0148       RESET_TR();
;PCODE: $00000135 VOL: 0
; 0000 0149       delay_ms(10);
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 014A       INIT_TR();
;PCODE: $00000139 VOL: 0
; 0000 014B       WRITE_PATABLE();
;PCODE: $0000013A VOL: 0
; 0000 014C       GIFR=0x80;   // Сброс флага прерывания
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 014D       GICR|=0x80;  //Разрешение прерывания по приему пакета
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 014E 
; 0000 014F 
; 0000 0150 m:     LightDiode(1);
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 0151       delay_ms(100);
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 0152       PORTB.2=0; // SPI_SS ON
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 0153       while(PORTB.4==1); //Ждем 0 на MISO
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 0154       SPI_SEND(SIDLE); //Переход в режим IDLE
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 0155       SPI_SEND(SFRX); //Сброс буфера приема
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 0156       SPI_SEND(SFTX); //Сброс буфера передачи
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 0157 
; 0000 0158         SPI_SEND(0x7F);
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 0159       SPI_SEND(0x07);
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 015A       SPI_SEND('S');
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 015B       SPI_SEND('E');
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 015C       SPI_SEND('X');
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 015D       SPI_SEND('O');
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 015E       SPI_SEND('N');
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 015F       SPI_SEND('I');
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 0160       SPI_SEND('X');
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 0161       PORTB.2=1; // SPI_SS OFF
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 0162 
; 0000 0163       PORTB.2=0; // SPI_SS ON
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 0164       while(PORTB.4==1); //Ждем 0 на MISO
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 0165       SPI_SEND(STX);
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 0166 
; 0000 0167       PORTB.2=1; // SPI_SS OFF
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 0168 
; 0000 0169      // while(PORTD.3==0);
; 0000 016A      // LightDiode(2);
; 0000 016B       // while(PORTD.3==1);
; 0000 016C 
; 0000 016D 
; 0000 016E 
; 0000 016F     //  SPI_SEND(SRX);  //Переход в режим RX
; 0000 0170       //delay_ms(100);
; 0000 0171      // PORTB.2=1; // SPI_SS OFF
; 0000 0172 
; 0000 0173 
; 0000 0174 
; 0000 0175                 /*
; 0000 0176 
; 0000 0177       PORTB.2=0; // SPI_SS ON
; 0000 0178       while(PORTB.4==1); //Ждем 0 на MISO
; 0000 0179 
; 0000 017A        for (i=0;i<37;i++)
; 0000 017B        {
; 0000 017C        data.buf=init[i];
; 0000 017D         STATUS[i]=READ_REG(data.b[1]);
; 0000 017E        }
; 0000 017F 
; 0000 0180       STATUS[0]=0xAA;
; 0000 0181       STATUS[1]=READ_REG(0x3E);
; 0000 0182       STATUS[2]=0xAA;
; 0000 0183       STATUS[3]=SPI_SEND(SNOP);
; 0000 0184       PORTB.2=1; // SPI_SS OFF
; 0000 0185 
; 0000 0186 
; 0000 0187         // delay_ms(3000);
; 0000 0188           LightDiode(1);
; 0000 0189           PORTB.2=0; // SPI_SS ON
; 0000 018A       while(PORTB.4==1); //Ждем 0 на MISO
; 0000 018B           STATUS[5]=SPI_SEND(SNOP);
; 0000 018C       PORTB.2=1; // SPI_SS OFF
; 0000 018D 
; 0000 018E        // LightDiode(0);
; 0000 018F        // while(PORTB.0==0);
; 0000 0190         // LightDiode(2);
; 0000 0191         */
; 0000 0192         LightDiode(1);
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 0193         delay_ms(1000);
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 0194                       /*
; 0000 0195          PORTB.2=0; // SPI_SS ON
; 0000 0196       while(PORTB.4==1); //Ждем 0 на MISO
; 0000 0197        SPI_SEND(SIDLE); //Переход в режим IDLE
; 0000 0198       data.b[1]=READ_REG(0x0E);
; 0000 0199       data.b[0]=READ_REG(0x0F);
; 0000 019A        STATUS[0]= data.b[1];
; 0000 019B        STATUS[1]= data.b[0];
; 0000 019C       data.buf= data.buf+10;
; 0000 019D 
; 0000 019E        // STATUS[2]= data.b[1];
; 0000 019F       // STATUS[3]= data.b[0];
; 0000 01A0 
; 0000 01A1       if (data.buf>0xFFD0) {LightDiode(2);
; 0000 01A2                                  while(1);}
; 0000 01A3 
; 0000 01A4       reg1.b[1]=0x0E;
; 0000 01A5       reg1.b[0]=data.b[1];
; 0000 01A6       WRITE_REG(reg1.buf);
; 0000 01A7 
; 0000 01A8        reg0.b[1]=0x0F;
; 0000 01A9       reg0.b[0]=data.b[0];
; 0000 01AA       WRITE_REG(reg0.buf);
; 0000 01AB 
; 0000 01AC      // WRITE_REG(0x0F74);
; 0000 01AD      STATUS[4]=  SPI_SEND(SNOP);
; 0000 01AE 
; 0000 01AF       SPI_SEND(SCAL);
; 0000 01B0        PORTB.2=1; // SPI_SS OFF   */
; 0000 01B1         goto m;
;PCODE: $00000188 VOL: 0
; 0000 01B2 
; 0000 01B3 
; 0000 01B4       }
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 01B5 }
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
