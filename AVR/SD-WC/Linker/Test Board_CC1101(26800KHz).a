;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : Test Board_CC1101(26800KHz)
;Version : 1
;Date    : 06.05.2012
;Author  : Alexandr Gordejchik
;Company : NTS
;Comments:
;
;
;Chip type               : ATtiny44
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 64
;*****************************************************/
;
;#include <tiny44.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x18
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x18
;PCODE: $00000007 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000008 VOL: 0
	#endif
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
;#include <delay.h>
;#include <string.h>
;#include <stdlib.h>
;
;
;
;//++++++++++++ Определение строб-комманд трансивера+++++++++++++++++++++++++++++++++++++++++++++++++++++
;#define SRES 0x30 //Сброс трансивера
;#define SIDLE 0x36 //Переход в режим IDLE
;#define SCAL 0x33   // Калибровка частотного синтезатора
;#define SRX 0x34   // Переход в режим RX
;#define STX 0x35   // Переход в режим TX
;#define SFRX 0x3A  // Очистка RX FIFO
;#define SFTX 0x3B  // Очистка TX FIFO
;#define SNOP 0x3D  // Пустая строб-команда
;//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; // Массив инициализации регистров (старший байт - адрес, младший - значение)
;flash unsigned int init[35]=
;{
; 0x000E, //0 IOGFG2 Обнаружение несущей
; 0x020E, //1 IOGFG0 Прием-передача пакета
; 0x06FF, //2 PKTLEN Длинна пакета
; 0x0704, //3 PKRCTRL1 Контроль пакета
; 0x0805, //4 PKRCTRL0 Контроль пакета
; 0x0901, //5 ADDR Адрес устройства
; 0x0A2F, //6 CHANNR Номер канала
; 0x0B06, //7 FSCTRL1 Параметры контроля синтезатора частоты
; 0x0C00, //8 FSCTRL0 Параметры контроля синтезатора частоты
; 0x0D10, //9 FREQ2 Параметы опорной частоты
; 0x0E28, //10 FREQ1 Параметы опорной частоты
; 0x0F1E, //11 FREQ0 Параметы опорной частоты
; 0x1085, //12 MDMCFG4 Конфигурация модема
; 0x1178, //13 MDMCFG3 Конфигурация модема
; 0x1273, //14 MDMCFG2 Конфигурация модема
; 0x1302, //15 MDMCFG1 Конфигурация модема
; 0x14E9, //16 MDMCFG0 Конфигурация модема
; 0x1500, //17 DEVIATION Девиация
; 0x1730, //18 MCSM1 Конфигурация автомата контроля радио
; 0x1818, //19 MCSM0 Конфигурация автомата контроля радио
; 0x1916, //20 FOCCFG Компенсация сдвига частоты
; 0x1A6C, //21 BSCFG Конфигурация побитовой синхронизации
; 0x1BC0, //22 AGCCTRL2 Пармаметры приемного тракта
; 0x1C00, //23 AGCCTRL1 Пармаметры приемного тракта
; 0x1DB2, //24 AGCCTRL0 Пармаметры приемного тракта
; 0x21B6, //25 FREND1 Параметры приемного тракта
; 0x2210, //26 FREND0 Параметры передающего тракта
; 0x23E9, //27 FSCAL3 Параметры калибровки синтезатора частоты
; 0x242A, //28 FSCAL2 Параметры калибровки синтезатора частоты
; 0x2500, //29 FSCAL1 Параметры калибровки синтезатора частоты
; 0x261F, //30 FSCAL0 Параметры калибровки синтезатора частоты
; 0x2959, //31 FSTEST Проверка синтезаторы частоты
; 0x2C81, //32 TEST2
; 0x2D35, //33 TEST1
; 0x2E09  //34 TEST0
;};
;//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;union U      // Определение объединения
;		{
;			unsigned int buf;
;			unsigned char b[2];
;		};
;
;//union U data;
;
;// Определение глобальных переменных
;unsigned char i;   //Основной счетчик
;//eeprom unsigned char ST;
;eeprom unsigned char STAT[37];
;//*******************************************************************************************
;//*******************************************************************************************
;//*******************ФУНКЦИИ ДЛЯ РАБОТЫ С ТРАНСИВЕРОМ*****************************************
;//============================================================================================
;// Функция передачи символа по SPI
;unsigned char SPI_SEND(unsigned char data)
; 0000 0062 {

	.CSEG
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
; 0000 0063  USIDR=data;      // Загрузка данных в сдвиговый регистр
;	data -> Y+0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0064  USISR=(1<<USIOIF);  // Очистка флага переполнения и 4-битного счетчика
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0065  TIFR0 |= (1<<OCF0A);   // Очистка флага прерывания по совпадению таймера
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0066  TIMSK0 |= (1<<OCIE0A); // Разрешение прерывания по совпадению
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0067  while(USISR.USIOIF==0); //Ожидание конца передачи байта
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0068  TIMSK0=0x00;     //Запрет прерывания
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0069  return USIDR; // Возврат данных
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 006A  }
;PCODE: $00000022 VOL: 0
;
;//*******************************************************************************************
; void RESET_TR(void) //Сброс трансивера по включению питания
; 0000 006E {
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 006F USICR=0x00; //Отключение SPI
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0070 PORTA.4=1; //Устанавливаем 1 на SCK
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0071 PORTA.5=0;  // Устанавливаем 0 на MOSI
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0072 PORTA.3=0; // SPI_SS ON
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0073 delay_us(1);
;PCODE: $0000002D VOL: 0
; 0000 0074 PORTA.3=1; // SPI_SS OFF
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0075 delay_us(40);
;PCODE: $00000030 VOL: 0
; 0000 0076 USICR=0x1A; //Включение SPI
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0077 PORTA.3=0; // SPI_SS ON
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0078 while(PINA.6==1); //Ждем 0 на MISO
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0079 SPI_SEND(SRES);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 007A PORTA.3=1; // SPI_SS OFF
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 007B }
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;//*******************************************************************************************
;void WRITE_REG( unsigned int reg) // Функция записи регистра
; 0000 007E {  union U dat;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 007F PORTA.3=0; // SPI_SS ON
;PCODE: $00000044 VOL: 0
;	reg -> Y+2
;	dat -> Y+0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0080 while(PINA.6==1); //Ждем 0 на MISO
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0081 
; 0000 0082  dat.buf=reg;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0083  SPI_SEND(dat.b[1]);  //Адрес регистра
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0084  SPI_SEND(dat.b[0]);  //Значение регистра
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0085  PORTA.3=1; // SPI_SS OFF
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0086 }
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;//********************************************************************************************
;unsigned char READ_REG(unsigned char adr)  // Функция чтения регистра
; 0000 0089 {  unsigned char reg;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 008A    PORTA.3=0; // SPI_SS ON
;PCODE: $0000005C VOL: 0
;	adr -> Y+1
;	reg -> R17
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 008B    while(PINA.6==1); //Ждем 0 на MISO
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 008C    SPI_SEND(adr | 0x80);   // Старший бит определяет операцию
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 008D    reg= SPI_SEND(0x00);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 008E    return reg;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 008F    PORTA.3=1; // SPI_SS OFF
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0090 }
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;//**********************************************************************************************
; void INIT_TR(void) //Функция инициализации трансивера
; 0000 0093  {
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0094 
; 0000 0095 
; 0000 0096   for (i=0;i<35;i++)
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0097    {
; 0000 0098     WRITE_REG(init[i]);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0099     };
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 009A 
; 0000 009B 
; 0000 009C 
; 0000 009D  }
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;//********************************************************************************************
;void WRITE_PATABLE(void)    //Запись таблицы мощности
; 0000 00A0 {
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00A1 PORTA.3=0; // SPI_SS ON
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00A2    while(PINA.6==1); //Ждем 0 на MISO
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00A3 WRITE_REG(0x3EC0);         //Запись значения выходной мощности передатчика +1dbm
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00A4    PORTA.3=1; // SPI_SS OFF
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00A5 }
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;//*********************************************************************************************
;void STROB(unsigned char strob)  //Запись строб-команды
; 0000 00A8 {
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00A9 PORTA.3=0; // SPI_SS ON
;	strob -> Y+0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00AA  while(PINA.6==1); //Ждем 0 на MISO
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00AB  SPI_SEND(strob);
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00AC   PORTA.3=1; // SPI_SS OFF
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00AD }
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;//******************************************************************************************
;unsigned char STATUS(void)
; 0000 00B0 { unsigned char st;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00B1 PORTA.3=0; // SPI_SS ON
;PCODE: $000000B5 VOL: 0
;	st -> R17
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00B2 while(PINA.6==1); //Ждем 0 на MISO
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00B3 st=SPI_SEND(SNOP);
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00B4 PORTA.3=1; // SPI_SS OFF
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00B5 return st;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00B6 }
;PCODE: $000000C7 VOL: 0
;//*******************************************************************************************
;//===========================ПРЕРЫВАНИЯ======================================================
;// Timer 0 output compare A interrupt service routine
;interrupt [TIM0_COMPA] void timer0_compa_isr(void)    //Прерывание по совпадению таймера
; 0000 00BB {
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00BC USICR |= (1<<USITC); // Задание тактового импульса
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00BD 
; 0000 00BE }
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;
;//============================================================================================
;//+++++++++++++++++++ОСНОВНАЯ ФУНКЦИЯ ПРОГРАММЫ ++++++++++++++++++++++++++++++++++++++++++++++
;//=============================================================================================
;void main(void)
; 0000 00C4 {
;PCODE: $000000CF VOL: 0
; 0000 00C5 // Declare your local variables here
; 0000 00C6 
; 0000 00C7 // Crystal Oscillator division factor: 1
; 0000 00C8 #pragma optsize-
; 0000 00C9 CLKPR=0x80;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00CA CLKPR=0x00;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00CB #ifdef _OPTIMIZE_SIZE_
; 0000 00CC #pragma optsize+
; 0000 00CD #endif
; 0000 00CE 
; 0000 00CF // Input/Output Ports initialization
; 0000 00D0 // Port A initialization
; 0000 00D1 // Func7=Out Func6=In Func5=Out Func4=Out Func3=Out Func2=Out Func1=In Func0=In
; 0000 00D2 // State7=0 State6=T State5=0 State4=0 State3=1 State2=0 State1=T State0=T
; 0000 00D3 PORTA=0x08;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00D4 DDRA=0xBC;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00D5 
; 0000 00D6 // Port B initialization
; 0000 00D7 // Func3=In Func2=In Func1=In Func0=In
; 0000 00D8 // State3=T State2=T State1=P State0=P
; 0000 00D9 PORTB=0x03;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00DA DDRB=0x00;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00DB 
; 0000 00DC // Timer/Counter 0 initialization
; 0000 00DD // Clock source: System Clock
; 0000 00DE // Clock value: 8000,000 kHz
; 0000 00DF // Mode: Normal top=0xFF
; 0000 00E0 // OC0A output: Disconnected
; 0000 00E1 // OC0B output: Disconnected
; 0000 00E2 TCCR0A=0x00;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00E3 TCCR0B=0x01;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00E4 TCNT0=0x00;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00E5 OCR0A=0x1F;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00E6 OCR0B=0x00;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00E7 
; 0000 00E8 // Timer/Counter 1 initialization
; 0000 00E9 // Clock source: System Clock
; 0000 00EA // Clock value: Timer1 Stopped
; 0000 00EB // Mode: Normal top=0xFFFF
; 0000 00EC // OC1A output: Discon.
; 0000 00ED // OC1B output: Discon.
; 0000 00EE // Noise Canceler: Off
; 0000 00EF // Input Capture on Falling Edge
; 0000 00F0 // Timer1 Overflow Interrupt: Off
; 0000 00F1 // Input Capture Interrupt: Off
; 0000 00F2 // Compare A Match Interrupt: Off
; 0000 00F3 // Compare B Match Interrupt: Off
; 0000 00F4 TCCR1A=0x00;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00F5 TCCR1B=0x00;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00F6 TCNT1H=0x00;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00F7 TCNT1L=0x00;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00F8 ICR1H=0x00;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 00F9 ICR1L=0x00;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 00FA OCR1AH=0x00;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00FB OCR1AL=0x00;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00FC OCR1BH=0x00;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00FD OCR1BL=0x00;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00FE 
; 0000 00FF // External Interrupt(s) initialization
; 0000 0100 // INT0: Off
; 0000 0101 // Interrupt on any change on pins PCINT0-7: Off
; 0000 0102 // Interrupt on any change on pins PCINT8-11: Off
; 0000 0103 MCUCR=0x00;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 0104 GIMSK=0x00;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 0105 
; 0000 0106 // Timer/Counter 0 Interrupt(s) initialization
; 0000 0107 TIMSK0=0x02;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 0108 
; 0000 0109 // Timer/Counter 1 Interrupt(s) initialization
; 0000 010A TIMSK1=0x00;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 010B 
; 0000 010C // Universal Serial Interface initialization
; 0000 010D // Mode: Three Wire (SPI)
; 0000 010E // Clock source: Reg.=ext. pos. edge, Cnt.=USITC
; 0000 010F // USI Counter Overflow Interrupt: Off
; 0000 0110 USICR=0x1A;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 0111 
; 0000 0112 // Analog Comparator initialization
; 0000 0113 // Analog Comparator: Off
; 0000 0114 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0115 ACSR=0x80;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 0116 ADCSRB=0x00;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 0117 DIDR0=0x00;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 0118 
; 0000 0119 // ADC initialization
; 0000 011A // ADC disabled
; 0000 011B ADCSRA=0x00;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 011C 
; 0000 011D // Global enable interrupts
; 0000 011E #asm("sei")
;PCODE: $0000010C VOL: 0
	sei
;PCODE: $0000010D VOL: 0
; 0000 011F 
; 0000 0120 while (1)
;PCODE: $0000010E VOL: 0
; 0000 0121       {
; 0000 0122 
; 0000 0123       PORTA.2=1; //Светодиод 1
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 0124       PORTA.7=0; //Светодиод 2
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 0125       delay_ms(1000);
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 0126 
; 0000 0127       RESET_TR();
;PCODE: $00000116 VOL: 0
; 0000 0128       delay_ms(10);
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 0129       INIT_TR();
;PCODE: $0000011A VOL: 0
; 0000 012A       WRITE_PATABLE();
;PCODE: $0000011B VOL: 0
; 0000 012B       STROB(SIDLE);
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 012C       STROB(SFRX);
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 012D       STROB(SFTX);
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 012E       STROB(SRX);
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 012F       delay_ms(1);
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 0130       STAT[0]=STATUS();
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 0131       PORTA.2=0; //Светодиод 1
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 0132       PORTA.7=1; //Светодиод 2
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 0133 
; 0000 0134       while(1) {
;PCODE: $00000132 VOL: 0
; 0000 0135       while(PINA.0==0);
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 0136        PORTA.2=1; //Светодиод 1
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 0137       PORTA.7=0; //Светодиод 2
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 0138       // STAT[0]=READ_REG(0x72);
; 0000 0139         // while(1);
; 0000 013A       while(PINA.0==1);
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 013B        PORTA.2=0; //Светодиод 1
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 013C       PORTA.7=1; //Светодиод 2
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 013D       }
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 013E       //while(1);
; 0000 013F       }
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 0140 }
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
